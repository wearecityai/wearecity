#!/usr/bin/env python3
"""
Probar el sistema h√≠brido inteligente con diferentes tipos de consulta
"""

import requests
import json
import time

def test_query(query, city_slug, expected_system, test_name):
    """Probar una consulta espec√≠fica"""
    print(f"\nüß™ {test_name}")
    print(f"üìù Consulta: '{query}'")
    print(f"üèôÔ∏è Ciudad: {city_slug}")
    print(f"üéØ Sistema esperado: {expected_system}")
    print("-" * 60)
    
    try:
        start_time = time.time()
        
        response = requests.post(
            'https://us-central1-wearecity-2ab89.cloudfunctions.net/hybridIntelligentProxy',
            json={
                "query": query,
                "citySlug": city_slug,
                "userId": "test-hybrid-system",
                "isAdmin": False
            },
            timeout=30
        )
        
        elapsed_time = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"‚úÖ Respuesta exitosa en {elapsed_time:.2f}s")
            print(f"ü§ñ Sistema usado: {result.get('systemUsed', 'N/A')}")
            print(f"üìä Modelo: {result.get('modelUsed', 'N/A')}")
            print(f"üîç B√∫squeda: {'S√≠' if result.get('searchPerformed') else 'No'}")
            print(f"üîÑ Fallback: {'S√≠' if result.get('fallbackUsed') else 'No'}")
            
            if 'classification' in result:
                cls = result['classification']
                print(f"üß† Clasificaci√≥n: {cls.get('type', 'N/A')} ({cls.get('confidence', 0)*100:.0f}%)")
                print(f"üí° Razonamiento: {cls.get('reasoning', 'N/A')}")
                print(f"‚è±Ô∏è Latencia estimada: {cls.get('estimatedLatency', 0)}s")
                print(f"üí∞ Costo estimado: ‚Ç¨{cls.get('estimatedCost', 0)}")
            
            # Mostrar parte de la respuesta
            response_text = result.get('response', '')
            if response_text:
                preview = response_text[:200] + "..." if len(response_text) > 200 else response_text
                print(f"üìÑ Respuesta: {preview}")
            
            return True
        else:
            print(f"‚ùå Error {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Probar el sistema h√≠brido inteligente completo"""
    print("üöÄ PRUEBA COMPLETA DEL SISTEMA H√çBRIDO INTELIGENTE")
    print("üß† Clasificador Autom√°tico + Routing √ìptimo")
    print("=" * 80)
    
    tests = [
        # 1Ô∏è‚É£ CONSULTAS SIMPLES ‚Üí Gemini 2.5 Flash Directo
        {
            "query": "Hola",
            "city": "valencia",
            "expected": "Gemini 2.5 Flash Directo",
            "name": "CONSULTA SIMPLE: Saludo"
        },
        {
            "query": "Gracias",
            "city": "valencia", 
            "expected": "Gemini 2.5 Flash Directo",
            "name": "CONSULTA SIMPLE: Agradecimiento"
        },
        
        # 2Ô∏è‚É£ CONSULTAS DE EVENTOS ‚Üí RAG Vectorial
        {
            "query": "¬øQu√© eventos hay este fin de semana?",
            "city": "la-vila-joiosa",
            "expected": "RAG Vectorial",
            "name": "CONSULTA EVENTOS: Fin de semana"
        },
        {
            "query": "conciertos y festivales de m√∫sica",
            "city": "valencia",
            "expected": "RAG Vectorial",
            "name": "CONSULTA EVENTOS: M√∫sica"
        },
        
        # 3Ô∏è‚É£ CONSULTAS DE TR√ÅMITES ‚Üí Google Search Grounding
        {
            "query": "¬øC√≥mo solicitar una licencia de obras?",
            "city": "valencia",
            "expected": "Google Search Grounding",
            "name": "CONSULTA TR√ÅMITES: Licencia obras"
        },
        {
            "query": "horario de atenci√≥n del ayuntamiento",
            "city": "alicante",
            "expected": "Google Search Grounding", 
            "name": "CONSULTA TR√ÅMITES: Horarios"
        },
        
        # 4Ô∏è‚É£ CONSULTAS COMPLEJAS ‚Üí Agente IA Completo
        {
            "query": "Planifica un itinerario tur√≠stico de 2 d√≠as combinando cultura, gastronom√≠a y naturaleza",
            "city": "valencia",
            "expected": "Agente IA Completo",
            "name": "CONSULTA COMPLEJA: Planificaci√≥n tur√≠stica"
        },
        {
            "query": "Compara las ventajas de vivir en el centro vs las afueras y recomienda barrios",
            "city": "valencia",
            "expected": "Agente IA Completo", 
            "name": "CONSULTA COMPLEJA: An√°lisis comparativo"
        }
    ]
    
    results = []
    
    for i, test in enumerate(tests, 1):
        print(f"\n{'='*20} PRUEBA {i}/{len(tests)} {'='*20}")
        
        success = test_query(
            test["query"],
            test["city"], 
            test["expected"],
            test["name"]
        )
        
        results.append((test["name"], success))
        
        # Pausa entre pruebas
        if i < len(tests):
            print("\n‚è≥ Esperando 2 segundos...")
            time.sleep(2)
    
    # Resumen final
    print("\n" + "=" * 80)
    print("üìä RESUMEN FINAL - SISTEMA H√çBRIDO INTELIGENTE")
    print("=" * 80)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ Resultado: {passed}/{total} pruebas exitosas")
    
    if passed == total:
        print("\nüéä ¬°SISTEMA H√çBRIDO COMPLETAMENTE OPERATIVO!")
        print("üß† Clasificador inteligente funcionando")
        print("‚ö° Routing autom√°tico optimizado")
        print("üí∞ Costos optimizados por tipo de consulta")
        print("üéØ Experiencia de usuario mejorada")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} pruebas fallaron - revisar configuraci√≥n")
    
    print("\nüéØ TIPOS DE SISTEMA IMPLEMENTADOS:")
    print("   1Ô∏è‚É£ üí¨ Gemini 2.5 Flash Directo (Consultas simples)")
    print("   2Ô∏è‚É£ üß† RAG Vectorial (Eventos y actividades)")
    print("   3Ô∏è‚É£ üîç Google Search Grounding (Tr√°mites oficiales)")
    print("   4Ô∏è‚É£ ü§ñ Agente IA Completo (Consultas complejas)")
    
    print(f"\nüöÄ VENTAJAS DEL SISTEMA H√çBRIDO:")
    print(f"   ‚Ä¢ ‚ö° Velocidad √≥ptima para cada tipo de consulta")
    print(f"   ‚Ä¢ üí∞ Costos optimizados (‚Ç¨0.001 - ‚Ç¨0.03 por consulta)")
    print(f"   ‚Ä¢ üéØ Precisi√≥n mejorada seg√∫n el contexto")
    print(f"   ‚Ä¢ üîÑ Fallback autom√°tico si un sistema falla")
    print(f"   ‚Ä¢ üß† Aprendizaje y mejora continua del clasificador")

if __name__ == "__main__":
    main()
