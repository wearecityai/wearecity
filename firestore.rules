rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Reglas para la colección de conversaciones del chat IA
    match /conversations/{conversationId} {
      // Permitir lectura y escritura para usuarios autenticados
      allow read, write: if request.auth != null;
      
      // Permitir lectura y escritura para el servicio de Firebase Functions
      allow read, write: if request.auth != null || request.auth.token.firebase.sign_in_provider == 'google.com';
      
      // Reglas para mensajes dentro de conversaciones
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
      }
    }
    
    // Reglas para métricas de chat - solo Functions pueden escribir, admin puede leer
    match /chat_analytics/{analyticsId} {
      // Solo usuarios autenticados pueden leer métricas
      allow read: if request.auth != null && 
                     (isGlobalAdmin(request.auth.uid) || 
                      resource.data.get('citySlug', '') in getUserCities(request.auth.uid));
      allow write: if false; // Solo Firebase Functions pueden escribir
    }
    
    // Reglas para categorías de chat - solo admin puede leer/escribir
    match /chat_categories/{categoryId} {
      // Solo admins pueden leer y escribir categorías
      allow read: if request.auth != null && isGlobalAdmin(request.auth.uid);
      allow write: if request.auth != null && isGlobalAdmin(request.auth.uid);
    }
    
    // Reglas para ciudades - lectura pública, escritura para admin
    match /cities/{cityId} {
      allow read: if true; // Lectura pública
      allow write: if request.auth != null && isAdmin(request.auth.uid, cityId);
    }
    
    // Reglas para logs de uso de IA - solo Functions
    match /ai_usage_logs/{logId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false; // Solo Firebase Functions pueden escribir
    }
    
    // Función auxiliar para verificar si un usuario es admin de una ciudad específica
    function isAdmin(userId, cityId) {
      return exists(/databases/$(database)/documents/cities/$(cityId)) &&
             get(/databases/$(database)/documents/cities/$(cityId)).data.admin_user_id == userId;
    }
    
    // Función para verificar si un usuario es admin global
    function isGlobalAdmin(userId) {
      return exists(/databases/$(database)/documents/profiles/$(userId)) &&
             get(/databases/$(database)/documents/profiles/$(userId)).data.role == 'administrativo';
    }
    
    // Función para obtener las ciudades de un usuario
    function getUserCities(userId) {
      // Esta función necesitaría ser implementada según la estructura de datos
      // Por ahora, solo permitimos acceso si es admin global
      return [];
    }
    
    // Reglas para profiles - solo el propietario y admins globales
    match /profiles/{userId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isGlobalAdmin(request.auth.uid));
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Reglas para logs de búsqueda - solo Functions pueden escribir, usuario puede leer los suyos
    match /search_usage_logs/{logId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false; // Solo Firebase Functions pueden escribir
    }
    
    // Reglas restrictivas por defecto - requiere autenticación para todo
    match /{document=**} {
      // SEGURIDAD: Solo usuarios autenticados pueden acceder por defecto
      allow read, write: if request.auth != null;
    }
  }
}
