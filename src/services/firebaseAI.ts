import { getAI, getGenerativeModel, GoogleAIBackend } from 'firebase/ai';
import { app } from '../integrations/firebase/config';
import { firebaseRealTimeSearchService } from './firebaseRealTimeSearch';

// Inicializar Firebase AI Logic con el backend de Google AI
const ai = getAI(app, { backend: new GoogleAIBackend() });

// Crear instancia del modelo Gemini
const model = getGenerativeModel(ai, { model: "gemini-2.5-flash" });

export interface FirebaseAIRequest {
  userMessage: string;
  userId?: string;
  userLocation?: { lat: number; lng: number };
  allowMapDisplay?: boolean;
  customSystemInstruction?: string;
  citySlug?: string;
  cityId?: string;
  conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string }>;
  mode?: 'fast' | 'quality';
  historyWindow?: number;
  timeoutMs?: number;
}

export interface FirebaseAIResponse {
  response: string;
  events?: any[];
  placeCards?: any[];
  realTimeData?: {
    places?: any[];
    searchResults?: any[];
    events?: any[];
    info?: any[];
  };
  error?: string;
}

/**
 * Servicio para interactuar con Firebase AI Functions
 */
export class FirebaseAIService {
  private static instance: FirebaseAIService;
  private chatSession: any;

  private constructor() {
    // Inicializar sesi√≥n de chat
    this.chatSession = model.startChat({
      history: [],
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 2000,
      },
    });
  }

  public static getInstance(): FirebaseAIService {
    if (!FirebaseAIService.instance) {
      FirebaseAIService.instance = new FirebaseAIService();
    }
    return FirebaseAIService.instance;
  }

  /**
   * Enviar mensaje al chat IA usando Firebase AI Logic
   */
  async sendMessage(request: FirebaseAIRequest): Promise<FirebaseAIResponse> {
    try {
      console.log('üöÄ Firebase AI Logic - Enviando mensaje:', {
        userMessage: request.userMessage.substring(0, 100) + '...',
        citySlug: request.citySlug,
        cityId: request.cityId,
        conversationHistoryLength: request.conversationHistory?.length || 0,
        mode: request.mode
      });

      // Realizar b√∫squeda en tiempo real si es necesario
      let realTimeData = null;
      if (this.shouldPerformRealTimeSearch(request.userMessage)) {
        try {
          realTimeData = await firebaseRealTimeSearchService.intelligentSearch({
            query: request.userMessage,
            city: request.citySlug || request.cityId || 'ciudad',
            location: request.userLocation,
            userType: this.detectUserType(request.userMessage, request.conversationHistory),
            urgency: this.detectUrgency(request.userMessage)
          });

          console.log('üöÄ Firebase AI Logic - Datos en tiempo real obtenidos:', {
            places: realTimeData.places?.length || 0,
            events: realTimeData.events?.length || 0,
            searchResults: realTimeData.searchResults?.length || 0,
            info: realTimeData.info?.length || 0
          });
        } catch (error) {
          console.warn('üöÄ Firebase AI Logic - Error en b√∫squeda en tiempo real:', error);
          // Continuar sin datos en tiempo real
        }
      }

      // Obtener informaci√≥n de fecha y hora actual
      const now = new Date();
      const currentDateTime = {
        date: now.toLocaleDateString('es-ES', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }),
        time: now.toLocaleTimeString('es-ES', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        }),
        iso: now.toISOString(),
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
      };

      // Construir el prompt del sistema con capacidades de b√∫squeda en tiempo real
      let systemPrompt = `Eres un asistente de ciudad inteligente y amigable con acceso a informaci√≥n en tiempo real. Tu objetivo es ayudar a los usuarios con informaci√≥n sobre su ciudad, servicios municipales, eventos, lugares de inter√©s y cualquier consulta relacionada con la vida urbana.

üïê **INFORMACI√ìN TEMPORAL ACTUAL (SOLO USAR CUANDO SEA RELEVANTE):**
- **Fecha actual:** ${currentDateTime.date}
- **Hora actual:** ${currentDateTime.time}
- **Zona horaria:** ${currentDateTime.timezone}

**INSTRUCCIONES OPTIMIZADAS PARA USO DE FECHA Y HORA:**
‚ö†Ô∏è **USO SELECTIVO:** Solo menciona la fecha/hora cuando sea directamente relevante para la respuesta.

**CASOS DONDE S√ç USAR INFORMACI√ìN TEMPORAL:**
- Preguntas sobre tiempo: "¬øQu√© hora es?", "¬øCu√°nto falta para...?"
- Eventos con fechas espec√≠ficas: "¬øQu√© eventos hay hoy/ma√±ana?"
- Horarios de servicios: "¬øEst√° abierto el ayuntamiento?"
- Recomendaciones por momento: "¬øD√≥nde puedo desayunar/almorzar/cenar?"
- Transporte: "¬øQu√© horarios tiene el autob√∫s?"
- Tr√°mites: "¬øPuedo hacer tr√°mites ahora?"

**CASOS DONDE NO USAR INFORMACI√ìN TEMPORAL:**
‚ùå Preguntas generales: "¬øQu√© restaurantes hay?", "¬øD√≥nde est√° el ayuntamiento?"
‚ùå Informaci√≥n est√°tica: "¬øQu√© monumentos hay?", "¬øC√≥mo llegar a...?"
‚ùå Consultas sin urgencia temporal: "¬øQu√© actividades puedo hacer?"

**REGLAS DE USO:**
- ‚úÖ Solo menciona la hora cuando el usuario pregunte espec√≠ficamente sobre tiempo
- ‚ùå NO menciones la hora en respuestas generales o informativas

## üöÄ CAPACIDADES DE B√öSQUEDA EN TIEMPO REAL

Tienes acceso a:
- **Google Places API**: Para buscar restaurantes, monumentos, instituciones, lugares p√∫blicos, farmacias, hospitales, estaciones de transporte
- **Google Search API**: Para buscar eventos actuales, informaci√≥n de tr√°mites, noticias locales, informaci√≥n tur√≠stica

### INSTRUCCIONES PARA USAR DATOS EN TIEMPO REAL:
1. **SIEMPRE** usa la informaci√≥n en tiempo real cuando est√© disponible
2. **PRIORIZA** datos actualizados sobre informaci√≥n est√°tica
3. **COMBINA** informaci√≥n de m√∫ltiples fuentes para respuestas completas
4. **MENCI√ìN** que la informaci√≥n es actualizada cuando uses datos en tiempo real

Debes ser:
- √ötil y preciso en tus respuestas
- Amigable y accesible
- Conocedor de la ciudad y sus servicios
- Capaz de proporcionar informaci√≥n pr√°ctica y actualizada
- Proactivo en buscar informaci√≥n actual cuando sea necesario

## üé® **FORMATO PROFESIONAL DE RESPUESTAS:**

### **ESTRUCTURA Y ORGANIZACI√ìN:**
- **T√≠tulos principales:** \`## üìç T√≠tulo Principal\`
- **Subt√≠tulos:** \`### üîπ Subt√≠tulo\`
- **Listas:** \`‚Ä¢ Elemento principal\` y \`  ‚ó¶ Sub-elemento\`
- **Iconos tem√°ticos:** üèõÔ∏è üçΩÔ∏è üè• üöå üéâ üìã üìû üïê üìç

### **FORMATO DE INFORMACI√ìN:**
- **Lugares:** \`## üè™ [Nombre]\` con **üìç Direcci√≥n**, **üïê Horario**, **üìû Tel√©fono**
- **Eventos:** \`## üéâ [Evento]\` con **üìÖ Fecha**, **üïê Hora**, **üìç Ubicaci√≥n**
- **Tr√°mites:** \`## üìã [Tr√°mite]\` con pasos numerados y documentaci√≥n requerida
- **Separadores:** Usa \`---\` para dividir secciones

### **ELEMENTOS VISUALES:**
- **Alertas:** \`‚ö†Ô∏è Importante:\` para advertencias
- **√âxito:** \`‚úÖ Correcto:\` para confirmaciones
- **Informaci√≥n:** \`‚ÑπÔ∏è Nota:\` para detalles adicionales

### **EJEMPLO DE FORMATO:**
\`\`\`
## üçΩÔ∏è Restaurantes Recomendados

### üîπ Opciones Principales:
‚Ä¢ **Restaurante A** - Cocina mediterr√°nea
‚Ä¢ **Restaurante B** - Especialidad en pescado

### üîπ Informaci√≥n √ötil:
**üìç Ubicaci√≥n:** Centro hist√≥rico
**üïê Horario:** 12:00-23:00
**üí∞ Precio:** ‚Ç¨15-‚Ç¨35

---
\`\`\`

**OBJETIVO:** Crear respuestas visualmente atractivas, bien estructuradas y f√°ciles de leer.

${request.customSystemInstruction ? `Instrucci√≥n espec√≠fica: ${request.customSystemInstruction}` : ''}`;

      // A√±adir contexto de la ciudad si est√° disponible
      if (request.citySlug) {
        systemPrompt += `\n\nContexto de la ciudad: ${request.citySlug}`;
      }

      // A√±adir contexto de ubicaci√≥n si est√° disponible
      if (request.userLocation) {
        systemPrompt += `\n\nUbicaci√≥n del usuario: Latitud ${request.userLocation.lat}, Longitud ${request.userLocation.lng}`;
      }

      // A√±adir instrucciones para mapas si est√° permitido
      if (request.allowMapDisplay) {
        systemPrompt += `\n\nPuedes sugerir mostrar mapas cuando sea relevante para la consulta del usuario.`;
      }

      // A√±adir datos en tiempo real al prompt si est√°n disponibles
      if (realTimeData) {
        systemPrompt += `\n\n## üìä DATOS EN TIEMPO REAL DISPONIBLES:\n`;
        
        if (realTimeData.places && realTimeData.places.length > 0) {
          systemPrompt += `\n### üè¢ LUGARES ENCONTRADOS:\n`;
          realTimeData.places.slice(0, 5).forEach((place, index) => {
            systemPrompt += `${index + 1}. **${place.name}** - ${place.formatted_address}`;
            if (place.rating) systemPrompt += ` (‚≠ê ${place.rating}/5)`;
            if (place.opening_hours?.open_now !== undefined) {
              systemPrompt += ` - ${place.opening_hours.open_now ? 'üü¢ Abierto' : 'üî¥ Cerrado'}`;
            }
            systemPrompt += `\n`;
          });
        }

        if (realTimeData.events && realTimeData.events.length > 0) {
          systemPrompt += `\n### üéâ EVENTOS ACTUALES:\n`;
          realTimeData.events.slice(0, 3).forEach((event, index) => {
            systemPrompt += `${index + 1}. **${event.title}** - ${event.snippet}\n`;
          });
        }

        if (realTimeData.searchResults && realTimeData.searchResults.length > 0) {
          systemPrompt += `\n### üîç INFORMACI√ìN ACTUALIZADA:\n`;
          realTimeData.searchResults.slice(0, 3).forEach((result, index) => {
            systemPrompt += `${index + 1}. **${result.title}** - ${result.snippet}\n`;
          });
        }

        systemPrompt += `\n**IMPORTANTE**: Usa esta informaci√≥n en tiempo real para proporcionar respuestas actualizadas y precisas.`;
      }

      // Construir el historial de conversaci√≥n para el contexto
      const recentHistory = request.conversationHistory
        ?.slice(-(request.historyWindow || 10))
        .map(msg => `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`)
        .join('\n') || '';

      // Construir el prompt completo
      const fullPrompt = `${systemPrompt}

${recentHistory ? `Historial reciente de la conversaci√≥n:\n${recentHistory}\n\n` : ''}Usuario: ${request.userMessage}

Asistente:`;

      console.log('üöÄ Firebase AI Logic - Prompt del sistema construido, longitud:', fullPrompt.length);

      // Crear un timeout para la petici√≥n
      const timeoutPromise = new Promise<never>((_, reject) => {
        setTimeout(() => {
          reject(new Error('Timeout: La petici√≥n tard√≥ demasiado tiempo'));
        }, request.timeoutMs || 60000); // 60 segundos por defecto
      });

      // Ejecutar la generaci√≥n de contenido con timeout
      const resultPromise = model.generateContent(fullPrompt);
      
      const result = await Promise.race([resultPromise, timeoutPromise]);
      
      console.log('üöÄ Firebase AI Logic - Respuesta generada, longitud:', result.response.text().length);

      return {
        response: result.response.text(),
        events: realTimeData?.events || [],
        placeCards: realTimeData?.places || [],
        realTimeData: realTimeData ? {
          places: realTimeData.places,
          searchResults: realTimeData.searchResults,
          events: realTimeData.events,
          info: realTimeData.info
        } : undefined
      };

    } catch (error) {
      console.error('üöÄ Firebase AI Logic - Error al enviar mensaje:', error);
      
      // Manejar errores espec√≠ficos
      if (error instanceof Error) {
        if (error.message.includes('timeout') || error.message.includes('Timeout')) {
          throw new Error('La petici√≥n tard√≥ demasiado tiempo. Por favor, intenta de nuevo.');
        }
        
        if (error.message.includes('unavailable') || error.message.includes('network')) {
          throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta de nuevo.');
        }
        
        if (error.message.includes('permission') || error.message.includes('unauthorized')) {
          throw new Error('No tienes permisos para usar este servicio. Contacta al administrador.');
        }
      }
      
      throw new Error(`Error al comunicarse con el asistente: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    }
  }

  /**
   * Verificar si el servicio est√° disponible
   */
  async checkAvailability(): Promise<boolean> {
    try {
      // Intentar hacer una petici√≥n simple para verificar disponibilidad
      const testRequest: FirebaseAIRequest = {
        userMessage: 'Hola, ¬øest√°s funcionando?',
        mode: 'fast'
      };
      
      await this.sendMessage(testRequest);
      return true;
    } catch (error) {
      console.warn('üöÄ Firebase AI Logic - Servicio no disponible:', error);
      return false;
    }
  }

  /**
   * Determinar si se debe realizar b√∫squeda en tiempo real
   */
  private shouldPerformRealTimeSearch(userMessage: string): boolean {
    const lowerMessage = userMessage.toLowerCase();
    
    // Palabras clave que indican necesidad de b√∫squeda en tiempo real
    const realTimeKeywords = [
      'restaurante', 'comida', 'cena', 'almuerzo',
      'monumento', 'museo', 'iglesia', 'castillo',
      'evento', 'actividad', 'concierto', 'festival',
      'farmacia', 'hospital', 'medico', 'urgencias',
      'metro', 'bus', 'transporte', 'estacion',
      'ayuntamiento', 'tramite', 'proceso',
      'hoy', 'ma√±ana', 'esta semana', 'actual',
      'donde', 'como', 'cuando', 'que'
    ];

    return realTimeKeywords.some(keyword => lowerMessage.includes(keyword));
  }

  /**
   * Detectar el tipo de usuario
   */
  private detectUserType(userMessage: string, conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string }>): 'tourist' | 'resident' {
    const lowerMessage = userMessage.toLowerCase();
    const fullContext = conversationHistory?.map(msg => msg.content).join(' ').toLowerCase() || '';
    
    const touristKeywords = [
      'turista', 'visitar', 'viaje', 'hotel', 'alojamiento',
      'que ver', 'lugares turisticos', 'monumentos', 'museos',
      'primera vez', 'no conozco', 'recomendaciones turisticas'
    ];

    const residentKeywords = [
      'tramite', 'ayuntamiento', 'servicios municipales',
      'empadronamiento', 'licencia', 'permiso',
      'basura', 'limpieza', 'mantenimiento'
    ];

    const allText = `${lowerMessage} ${fullContext}`;
    
    if (touristKeywords.some(keyword => allText.includes(keyword))) {
      return 'tourist';
    }
    
    if (residentKeywords.some(keyword => allText.includes(keyword))) {
      return 'resident';
    }

    return 'resident'; // Por defecto
  }

  /**
   * Detectar urgencia de la consulta
   */
  private detectUrgency(userMessage: string): 'low' | 'medium' | 'high' {
    const lowerMessage = userMessage.toLowerCase();
    
    const highUrgencyKeywords = [
      'urgencia', 'emergencia', 'urgente', 'inmediato',
      'accidente', 'incendio', 'robo', 'asalto',
      'ambulancia', 'policia', 'bomberos'
    ];

    const mediumUrgencyKeywords = [
      'rapido', 'pronto', 'hoy', 'ma√±ana',
      'problema', 'incidencia', 'averia'
    ];

    if (highUrgencyKeywords.some(keyword => lowerMessage.includes(keyword))) {
      return 'high';
    }
    
    if (mediumUrgencyKeywords.some(keyword => lowerMessage.includes(keyword))) {
      return 'medium';
    }

    return 'low';
  }

  /**
   * Obtener informaci√≥n del servicio
   */
  getServiceInfo() {
    return {
      name: 'Firebase AI Logic',
      provider: 'Google AI (Gemini)',
      models: ['gemini-2.5-flash', 'gemini-2.5-pro'],
      features: [
        'Chat en tiempo real',
        'Contexto de ciudad',
        'Historial de conversaci√≥n',
        'Modos r√°pido/calidad',
        'SDK oficial de Firebase',
        'B√∫squeda en tiempo real con Google Places',
        'B√∫squeda en tiempo real con Google Search',
        'Detecci√≥n inteligente de intenciones',
        'An√°lisis de contexto de usuario'
      ],
      realTimeSearch: firebaseRealTimeSearchService.getServiceInfo()
    };
  }
}

// Exportar instancia singleton
export const firebaseAIService = FirebaseAIService.getInstance();
