// Script para probar la prioridad de tr√°mites con 2.5 Pro + Google Search

async function testTramitesPriority() {
    try {
        console.log('üß™ Testing Tramites Priority with 2.5 Pro + Google Search...\n');
        
        const functionUrl = 'https://processaichat-7gaozpdiza-uc.a.run.app';
        const userId = 'k8aescDQi5dF03AhL3UybC1tpmX2';
        const citySlug = 'la-vila-joiosa';
        
        const testQueries = [
            // Consultas de tr√°mites (deber√≠an usar 2.5 Pro + Google Search)
            'quiero solicitar una licencia de vado',
            '¬øc√≥mo me empadrono?',
            'necesito un certificado de empadronamiento',
            '¬ød√≥nde puedo solicitar el bono de transporte?',
            '¬øqu√© documentos necesito para una licencia?',
            
            // Consultas NO de tr√°mites (deber√≠an usar RAG o 2.5 Flash)
            'hola',
            '¬øqu√© tiempo hace?',
            '¬øqu√© eventos hay este fin de semana?'
        ];
        
        for (const query of testQueries) {
            console.log(`üìù === Query: "${query}" ===`);
            
            const requestBody = {
                query: query,
                citySlug: citySlug,
                cityContext: {
                    name: 'La Vila Joiosa',
                    slug: citySlug
                },
                conversationHistory: []
            };
            
            const response = await fetch(functionUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            console.log('‚úÖ Response received:');
            console.log('üìä Success:', result.success);
            console.log('ü§ñ Model used:', result.data?.modelUsed);
            console.log('üìã Complexity:', result.data?.complexity);
            console.log('üîç Search performed:', result.data?.searchPerformed);
            console.log('üìù Response length:', result.data?.response?.length || 0, 'chars');
            console.log('üìù Response preview:', result.data?.response?.substring(0, 150) + '...');
            
            // An√°lisis
            const isTramitesQuery = query.toLowerCase().includes('licencia') || 
                                  query.toLowerCase().includes('empadron') || 
                                  query.toLowerCase().includes('certificado') || 
                                  query.toLowerCase().includes('bono') || 
                                  query.toLowerCase().includes('documentos');
            
            console.log('\nüîç AN√ÅLISIS:');
            console.log('üéØ Is tramites query:', isTramitesQuery);
            console.log('ü§ñ Model used:', result.data?.modelUsed);
            console.log('üîç Search performed:', result.data?.searchPerformed);
            
            if (isTramitesQuery) {
                if (result.data?.modelUsed === 'gemini-2.5-pro' && result.data?.searchPerformed) {
                    console.log('‚úÖ CORRECTO: Tr√°mites query using 2.5 Pro + Google Search');
                } else {
                    console.log('‚ùå ERROR: Tr√°mites query should use 2.5 Pro + Google Search');
                }
            } else {
                console.log('‚ÑπÔ∏è INFO: Non-tramites query, using appropriate model');
            }
            
            console.log('   ---\n');
            
            // Esperar un momento entre consultas
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
    } catch (error) {
        console.error('‚ùå Error testing tramites priority:', error);
    }
}

testTramitesPriority();
