# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Deploy to Production

on:
  workflow_dispatch:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    # This job targets the 'production' environment, which is automatically
    # created by the Terraform setup in `deployment/terraform/github.tf`.
    # To enable manual approval for deployments, you must add a protection
    # rule to this environment in your GitHub repository settings.
    #
    # 1. Go to your repository's Settings > Environments.
    # 2. Select the 'production' environment.
    # 3. Under 'Protection rules', check the 'Required reviewers' box.
    # 4. Add the specific users or teams who must approve the deployment.
    #
    # Once configured, the workflow will pause at this step and wait for an
    # authorized user to approve it before proceeding.
    environment:
      name: production
    concurrency: production
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/{% raw %}${{ vars.GCP_PROJECT_NUMBER }}{% endraw %}/locations/global/workloadIdentityPools/{% raw %}${{ secrets.WIF_POOL_ID }}{% endraw %}/providers/{% raw %}${{ secrets.WIF_PROVIDER_ID }}{% endraw %}'
          service_account: '{% raw %}${{ secrets.GCP_SERVICE_ACCOUNT }}{% endraw %}'
          create_credentials_file: true
          project_id: {% raw %}${{ vars.CICD_PROJECT_ID }}{% endraw %}

{%- if cookiecutter.deployment_target == 'cloud_run' %}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
{%- endif %}

{%- if cookiecutter.deployment_target == 'agent_engine' %}
      - name: Install uv and dependencies
        run: |
          pip install uv==0.6.12
          uv sync --locked
{%- endif %}

{%- if cookiecutter.data_ingestion %}
      - name: Deploy data ingestion pipeline (Production)
        run: |
          cd data_ingestion && pip install uv==0.6.12 && cd data_ingestion_pipeline && \
          uv sync --locked && uv run python submit_pipeline.py
        env:
          PIPELINE_ROOT: {% raw %}${{ vars.PIPELINE_GCS_ROOT_PROD }}{% endraw %}
          REGION: {% raw %}${{ vars.REGION }}{% endraw %}
          {%- if cookiecutter.datastore_type == "vertex_ai_search" %}
          DATA_STORE_REGION: {% raw %}${{ vars.DATA_STORE_REGION }}{% endraw %}
          DATA_STORE_ID: {% raw %}${{ vars.DATA_STORE_ID_PROD }}{% endraw %}
          {%- elif cookiecutter.datastore_type == "vertex_ai_vector_search" %}
          VECTOR_SEARCH_INDEX: {% raw %}${{ vars.VECTOR_SEARCH_INDEX_PROD }}{% endraw %}
          VECTOR_SEARCH_INDEX_ENDPOINT: {% raw %}${{ vars.VECTOR_SEARCH_INDEX_ENDPOINT_PROD }}{% endraw %}
          VECTOR_SEARCH_BUCKET: {% raw %}${{ vars.VECTOR_SEARCH_BUCKET_PROD }}{% endraw %}
          {%- endif %}
          PROJECT_ID: {% raw %}${{ vars.PROD_PROJECT_ID }}{% endraw %}
          SERVICE_ACCOUNT: {% raw %}${{ vars.PIPELINE_SA_EMAIL_PROD }}{% endraw %}
          PIPELINE_NAME: {% raw %}${{ vars.PIPELINE_NAME }}{% endraw %}
          CRON_SCHEDULE: {% raw %}${{ vars.PIPELINE_CRON_SCHEDULE }}{% endraw %}
          DISABLE_CACHING: "TRUE"
{%- endif %}

{%- if cookiecutter.deployment_target == 'cloud_run' %}

      - name: Deploy to Production (Cloud Run)
        run: |
          gcloud run deploy {{cookiecutter.project_name}} \
            --image {% raw %}${{ vars.REGION }}{% endraw %}-docker.pkg.dev/{% raw %}${{ vars.CICD_PROJECT_ID }}{% endraw %}/{% raw %}${{ vars.ARTIFACT_REGISTRY_REPO_NAME }}{% endraw %}/{% raw %}${{ vars.CONTAINER_NAME }}{% endraw %} \
            --region {% raw %}${{ vars.REGION }}{% endraw %} \
            --project {% raw %}${{ vars.PROD_PROJECT_ID }}{% endraw %}

{%- elif cookiecutter.deployment_target == 'agent_engine' %}

      - name: Deploy to Production (Agent Engine)
        run: |
          uv export --no-hashes --no-sources --no-header --no-dev --no-emit-project --no-annotate --locked > .requirements.txt
          uv run {{cookiecutter.agent_directory}}/agent_engine_app.py \
            --project {% raw %}${{ vars.PROD_PROJECT_ID }}{% endraw %} \
            --location {% raw %}${{ vars.REGION }}{% endraw %} \
            --service-account {% raw %}${{ vars.APP_SA_EMAIL_PROD }}{% endraw %} \
            --set-env-vars="COMMIT_SHA={% raw %}${{ github.sha }}{% endraw %}{%- if cookiecutter.data_ingestion %}{%- if cookiecutter.datastore_type == "vertex_ai_search" %},DATA_STORE_ID={% raw %}${{ vars.DATA_STORE_ID_PROD }}{% endraw %},DATA_STORE_REGION={% raw %}${{ vars.DATA_STORE_REGION }}{% endraw %}{%- elif cookiecutter.datastore_type == "vertex_ai_vector_search" %},VECTOR_SEARCH_INDEX={% raw %}${{ vars.VECTOR_SEARCH_INDEX_PROD }}{% endraw %},VECTOR_SEARCH_INDEX_ENDPOINT={% raw %}${{ vars.VECTOR_SEARCH_INDEX_ENDPOINT_PROD }}{% endraw %},VECTOR_SEARCH_BUCKET={% raw %}${{ vars.VECTOR_SEARCH_BUCKET_PROD }}{% endraw %}{%- endif %}{%- endif %}"
{%- endif %}

