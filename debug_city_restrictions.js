// Using native fetch

async function debugCityRestrictions() {
    try {
        console.log('üîç Debugging City Restrictions Deep Analysis...');
        
        const functionUrl = 'https://processaichat-7gaozpdiza-uc.a.run.app';
        const userId = 'k8aescDQi5dF03AhL3UybC1tpmX2';
        const citySlug = 'la-vila-joiosa';
        
        const testQueries = [
            {
                query: '¬øen qu√© ciudad estoy?',
                description: 'Consulta directa sobre ubicaci√≥n',
                expectedModel: 'gemini-2.5-flash-lite'
            },
            {
                query: '¬øqu√© eventos hay en Madrid?',
                description: 'Consulta sobre otra ciudad (deber√≠a ser rechazada)',
                expectedModel: 'gemini-2.5-pro'
            },
            {
                query: '¬ød√≥nde puedo comer en Barcelona?',
                description: 'Consulta sobre restaurantes en otra ciudad',
                expectedModel: 'gemini-2.5-flash-lite'
            },
            {
                query: 'hola',
                description: 'Saludo simple',
                expectedModel: 'gemini-2.5-flash-lite'
            }
        ];
        
        for (const test of testQueries) {
            console.log(`\nüìù === ${test.description} ===`);
            console.log(`Query: "${test.query}"`);
            console.log(`Expected Model: ${test.expectedModel}`);
            
            const response = await fetch(functionUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    query: test.query,
                    userId: userId,
                    citySlug: citySlug,
                    cityContext: {
                        name: 'La Vila Joiosa',
                        slug: citySlug
                    },
                    conversationHistory: []
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            console.log('‚úÖ Response received:');
            console.log('üìä Success:', result.success);
            console.log('üóÑÔ∏è RAG used:', result.data?.ragUsed);
            console.log('üîÑ Dynamic RAG:', result.data?.isDynamicRAG);
            console.log('ü§ñ Model used:', result.data?.modelUsed);
            console.log('üîç Search performed:', result.data?.searchPerformed);
            console.log('üìã Complexity:', result.data?.complexity);
            console.log('üìù Response:', result.data?.response);
            
            // An√°lisis detallado de la respuesta
            const responseText = result.data?.response?.toLowerCase() || '';
            
            console.log('\nüîç AN√ÅLISIS DETALLADO:');
            
            // Verificar si menciona la ciudad correcta
            const mentionsVilaJoiosa = responseText.includes('vila joiosa') || responseText.includes('la vila');
            console.log('‚úÖ Menciona La Vila Joiosa:', mentionsVilaJoiosa);
            
            // Verificar si menciona otras ciudades (no deber√≠a)
            const mentionsMadrid = responseText.includes('madrid');
            const mentionsBarcelona = responseText.includes('barcelona');
            const mentionsValencia = responseText.includes('valencia');
            const mentionsAlicante = responseText.includes('alicante');
            
            console.log('‚ùå Menciona Madrid:', mentionsMadrid);
            console.log('‚ùå Menciona Barcelona:', mentionsBarcelona);
            console.log('‚ùå Menciona Valencia:', mentionsValencia);
            console.log('‚ùå Menciona Alicante:', mentionsAlicante);
            
            // Verificar si rechaza consultas sobre otras ciudades
            const rejectsOtherCities = responseText.includes('solo puedo ayudar') || 
                                     responseText.includes('solo proporciona') ||
                                     responseText.includes('no puedo proporcionar') ||
                                     responseText.includes('mi enfoque est√° exclusivamente') ||
                                     responseText.includes('solo puedo ayudarte con');
            console.log('‚úÖ Rechaza otras ciudades:', rejectsOtherCities);
            
            // Verificar si el modelo usado es el esperado
            const correctModel = result.data?.modelUsed === test.expectedModel;
            console.log('‚úÖ Modelo correcto:', correctModel, `(esperado: ${test.expectedModel}, actual: ${result.data?.modelUsed})`);
            
            // Verificar si las restricciones est√°n funcionando
            let restrictionsWorking = false;
            if (test.query.includes('Madrid') || test.query.includes('Barcelona')) {
                restrictionsWorking = rejectsOtherCities && !mentionsMadrid && !mentionsBarcelona;
            } else {
                restrictionsWorking = mentionsVilaJoiosa;
            }
            console.log('üéØ Restricciones funcionando:', restrictionsWorking);
            
            // Esperar un momento entre consultas
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
        console.log('\nüéØ === RESUMEN DEL AN√ÅLISIS ===');
        console.log('Si las restricciones no funcionan, puede ser que:');
        console.log('1. Los systemPrompts no se est√©n aplicando correctamente');
        console.log('2. El cityContext no se est√© pasando bien');
        console.log('3. Los modelos no est√©n siguiendo las instrucciones');
        console.log('4. Hay un problema en la clasificaci√≥n de complejidad');
        
    } catch (error) {
        console.error('‚ùå Error debugging city restrictions:', error);
    }
}

debugCityRestrictions();
