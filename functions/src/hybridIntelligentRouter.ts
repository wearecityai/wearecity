import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';

// Tipos de consulta y sus caracter√≠sticas
export enum QueryType {
  SIMPLE = 'simple',           // Saludos, agradecimientos, consultas b√°sicas
  EVENTS = 'events',           // Eventos, actividades, agenda cultural
  PROCEDURES = 'procedures',   // Tr√°mites, documentaci√≥n, burocracia
  COMPLEX = 'complex'          // Consultas complejas que requieren razonamiento
}

export interface QueryClassification {
  type: QueryType;
  confidence: number;
  reasoning: string;
  suggestedSystem: 'gemini-direct' | 'rag-vectorial' | 'google-search' | 'agent-full';
  estimatedCost: number;      // En euros
  estimatedLatency: number;   // En segundos
}

export interface HybridResponse {
  success: boolean;
  response: string;
  classification: QueryClassification;
  systemUsed: string;
  modelUsed: string;
  searchPerformed: boolean;
  processingTime: number;
  timestamp: string;
  fallbackUsed?: boolean;
  error?: string;
}

/**
 * üß† CLASIFICADOR INTELIGENTE DE CONSULTAS
 * Analiza la consulta y decide el mejor sistema para responderla
 */
export class IntelligentQueryClassifier {
  
  // Patrones para diferentes tipos de consulta
  private static readonly SIMPLE_PATTERNS = [
    /^(hola|hi|hello|buenas|buenos d√≠as|buenas tardes|buenas noches)$/i,
    /^(gracias|thank you|muchas gracias)$/i,
    /^(adi√≥s|bye|hasta luego|nos vemos)$/i,
    /^(¬ø?c√≥mo est√°s|how are you|qu√© tal)$/i,
    /^(ayuda|help|informaci√≥n)$/i
  ];

  private static readonly EVENTS_PATTERNS = [
    /\b(evento|eventos|actividad|actividades|concierto|festival|exposici√≥n)\b/i,
    /\b(agenda|programaci√≥n|calendario|espect√°culo|teatro|m√∫sica)\b/i,
    /\b(qu√© hay|qu√© pasa|qu√© hacer|planes|entretenimiento)\b/i,
    /\b(este fin de semana|esta semana|hoy|ma√±ana|pr√≥ximo)\b.*\b(evento|actividad)\b/i,
    /\b(cultural|deportivo|gastron√≥mico|tur√≠stico)\b.*\b(evento|actividad)\b/i
  ];

  private static readonly PROCEDURES_PATTERNS = [
    /\b(tr√°mite|tr√°mites|papeles|documentaci√≥n|solicitar|solicitud)\b/i,
    /\b(licencia|permiso|certificado|empadronamiento|padr√≥n)\b/i,
    /\b(ayuntamiento|consistorio|oficina|sede electr√≥nica)\b/i,
    /\b(cita previa|horario|tel√©fono|direcci√≥n).*\b(ayuntamiento|oficina)\b/i,
    /\b(impuesto|tasa|multa|pago|factura)\b/i,
    /\b(c√≥mo|d√≥nde|cu√°ndo).*\b(solicitar|tramitar|pagar|presentar)\b/i
  ];

  private static readonly COMPLEX_PATTERNS = [
    /\b(planifica|organiza|recomienda|sugiere|dise√±a)\b/i,
    /\b(ruta|itinerario|plan|programa).*\b(tur√≠stico|visita|d√≠a)\b/i,
    /\b(mejor|mejores|comparar|diferencia|ventajas)\b/i,
    /\b(combina|relaciona|conecta).*\b(con|y)\b/i,
    /\b(an√°lisis|evaluaci√≥n|opini√≥n|consejo)\b/i
  ];

  /**
   * Clasifica una consulta y determina el mejor sistema para procesarla
   */
  static classifyQuery(query: string, citySlug: string): QueryClassification {
    const normalizedQuery = query.toLowerCase().trim();
    const queryLength = query.length;
    
    console.log(`üß† Clasificando consulta: "${query.substring(0, 50)}..." para ${citySlug}`);

    // 1Ô∏è‚É£ CONSULTAS SIMPLES (Gemini directo)
    if (queryLength < 20 || this.matchesPatterns(normalizedQuery, this.SIMPLE_PATTERNS)) {
      return {
        type: QueryType.SIMPLE,
        confidence: 0.95,
        reasoning: 'Consulta simple: saludo, agradecimiento o pregunta b√°sica',
        suggestedSystem: 'gemini-direct',
        estimatedCost: 0.001,
        estimatedLatency: 0.1
      };
    }

    // 2Ô∏è‚É£ CONSULTAS DE EVENTOS (RAG Vectorial)
    if (this.matchesPatterns(normalizedQuery, this.EVENTS_PATTERNS)) {
      return {
        type: QueryType.EVENTS,
        confidence: 0.9,
        reasoning: 'Consulta sobre eventos: buscar en RAG vectorial primero',
        suggestedSystem: 'rag-vectorial',
        estimatedCost: 0.005,
        estimatedLatency: 0.3
      };
    }

    // 3Ô∏è‚É£ CONSULTAS DE TR√ÅMITES (Google Search)
    if (this.matchesPatterns(normalizedQuery, this.PROCEDURES_PATTERNS)) {
      return {
        type: QueryType.PROCEDURES,
        confidence: 0.85,
        reasoning: 'Consulta sobre tr√°mites: usar Google Search Grounding para info oficial',
        suggestedSystem: 'google-search',
        estimatedCost: 0.01,
        estimatedLatency: 0.8
      };
    }

    // 4Ô∏è‚É£ CONSULTAS COMPLEJAS (Agente IA completo)
    if (queryLength > 100 || this.matchesPatterns(normalizedQuery, this.COMPLEX_PATTERNS)) {
      return {
        type: QueryType.COMPLEX,
        confidence: 0.8,
        reasoning: 'Consulta compleja: requiere razonamiento y m√∫ltiples herramientas',
        suggestedSystem: 'agent-full',
        estimatedCost: 0.03,
        estimatedLatency: 2.0
      };
    }

    // 5Ô∏è‚É£ DEFAULT: Usar Google Search para consultas generales
    return {
      type: QueryType.PROCEDURES,
      confidence: 0.6,
      reasoning: 'Consulta general: usar Google Search como opci√≥n segura',
      suggestedSystem: 'google-search',
      estimatedCost: 0.01,
      estimatedLatency: 0.8
    };
  }

  /**
   * Verifica si la consulta coincide con alg√∫n patr√≥n
   */
  private static matchesPatterns(query: string, patterns: RegExp[]): boolean {
    return patterns.some(pattern => pattern.test(query));
  }
}

/**
 * üöÄ ROUTER H√çBRIDO INTELIGENTE
 * Procesa consultas usando el sistema √≥ptimo para cada caso
 */
export class HybridIntelligentRouter {

  /**
   * Procesa una consulta usando el sistema h√≠brido inteligente
   */
  static async processQuery(
    query: string,
    citySlug: string,
    userId: string = 'anonymous',
    isAdmin: boolean = false
  ): Promise<HybridResponse> {
    const startTime = Date.now();
    
    try {
      // üß† PASO 1: Clasificar la consulta
      const classification = IntelligentQueryClassifier.classifyQuery(query, citySlug);
      
      console.log(`üéØ Consulta clasificada como: ${classification.type} (${classification.confidence * 100}%)`);
      console.log(`üí° Sistema sugerido: ${classification.suggestedSystem}`);
      console.log(`‚è±Ô∏è Latencia estimada: ${classification.estimatedLatency}s`);
      console.log(`üí∞ Costo estimado: ‚Ç¨${classification.estimatedCost}`);

      let result: any;
      let systemUsed: string;
      let fallbackUsed = false;

      // üîÄ PASO 2: Procesar seg√∫n el sistema sugerido
      switch (classification.suggestedSystem) {
        case 'gemini-direct':
          result = await this.processWithGeminiDirect(query, citySlug);
          systemUsed = 'Gemini 2.5 Flash Directo';
          break;

        case 'rag-vectorial':
          result = await this.processWithRAGVectorial(query, citySlug);
          if (!result || !result.response) {
            console.log('üîÑ RAG no encontr√≥ resultados, fallback a Google Search...');
            result = await this.processWithGoogleSearch(query, citySlug);
            systemUsed = 'RAG Vectorial ‚Üí Google Search (Fallback)';
            fallbackUsed = true;
          } else {
            systemUsed = 'RAG Vectorial';
          }
          break;

        case 'google-search':
          result = await this.processWithGoogleSearch(query, citySlug);
          systemUsed = 'Gemini 2.5 Flash + Google Search';
          break;

        case 'agent-full':
          result = await this.processWithFullAgent(query, citySlug, isAdmin);
          systemUsed = 'Vertex AI Agent Engine Completo';
          break;

        default:
          throw new Error(`Sistema no reconocido: ${classification.suggestedSystem}`);
      }

      const processingTime = (Date.now() - startTime) / 1000;

      return {
        success: true,
        response: result.response || 'No se pudo generar una respuesta adecuada.',
        classification,
        systemUsed,
        modelUsed: result.modelUsed || classification.suggestedSystem,
        searchPerformed: result.searchPerformed || false,
        processingTime,
        timestamp: new Date().toISOString(),
        fallbackUsed
      };

    } catch (error) {
      console.error('‚ùå Error en HybridIntelligentRouter:', error);
      
      const processingTime = (Date.now() - startTime) / 1000;
      
      return {
        success: false,
        response: 'Lo siento, hubo un problema procesando tu consulta. Por favor, int√©ntalo de nuevo.',
        classification: {
          type: QueryType.SIMPLE,
          confidence: 0,
          reasoning: 'Error en procesamiento',
          suggestedSystem: 'gemini-direct',
          estimatedCost: 0,
          estimatedLatency: 0
        },
        systemUsed: 'Error Handler',
        modelUsed: 'error',
        searchPerformed: false,
        processingTime,
        timestamp: new Date().toISOString(),
        error: error.message
      };
    }
  }

  /**
   * üí¨ SISTEMA 1: Gemini 2.5 Flash Directo (Consultas simples)
   */
  private static async processWithGeminiDirect(query: string, citySlug: string): Promise<any> {
    console.log('üí¨ Procesando con Gemini 2.5 Flash directo...');
    
    try {
      // Importar el servicio de Gemini
      const { processSimpleQuery } = await import('./vertexAIService');
      
      const result = await processSimpleQuery(query, citySlug, []);
      
      return {
        response: result.response,
        modelUsed: 'gemini-2.5-flash-lite',
        searchPerformed: false
      };
    } catch (error) {
      console.error('‚ùå Error en Gemini directo:', error);
      throw error;
    }
  }

  /**
   * üß† SISTEMA 2: RAG Vectorial (Eventos)
   */
  private static async processWithRAGVectorial(query: string, citySlug: string): Promise<any> {
    console.log('üß† Procesando con RAG vectorial...');
    
    try {
      // Llamar al agente con instrucciones espec√≠ficas para RAG
      const agentPrompt = `Busca informaci√≥n sobre eventos usando b√∫squeda vectorial: ${query}

Para la ciudad: ${citySlug}

INSTRUCCIONES:
1. USA vector_search_in_rag para buscar informaci√≥n sobre eventos
2. Si encuentras eventos relevantes, pres√©ntalos de forma organizada
3. Si no encuentras informaci√≥n, responde que no hay eventos disponibles
4. NO inventes informaci√≥n
5. Responde en espa√±ol de forma √∫til`;

      const agentResponse = await this.callAgentEngine(agentPrompt);
      
      // Verificar si encontr√≥ informaci√≥n √∫til
      if (!agentResponse || 
          agentResponse.length < 50 ||
          agentResponse.includes('no hay eventos') ||
          agentResponse.includes('No se encontraron')) {
        return null; // Trigger fallback
      }

      return {
        response: agentResponse,
        modelUsed: 'vertex-ai-agent-rag',
        searchPerformed: true
      };
    } catch (error) {
      console.error('‚ùå Error en RAG vectorial:', error);
      return null; // Trigger fallback
    }
  }

  /**
   * üîç SISTEMA 3: Google Search Grounding (Tr√°mites)
   */
  private static async processWithGoogleSearch(query: string, citySlug: string): Promise<any> {
    console.log('üîç Procesando con Google Search Grounding...');
    
    try {
      // Importar el servicio de Google Search
      const { processInstitutionalQuery } = await import('./vertexAIService');
      
      const result = await processInstitutionalQuery(query, citySlug, []);
      
      return {
        response: result.response,
        modelUsed: 'gemini-2.5-flash',
        searchPerformed: true
      };
    } catch (error) {
      console.error('‚ùå Error en Google Search:', error);
      throw error;
    }
  }

  /**
   * ü§ñ SISTEMA 4: Agente IA Completo (Consultas complejas)
   */
  private static async processWithFullAgent(query: string, citySlug: string, isAdmin: boolean): Promise<any> {
    console.log('ü§ñ Procesando con Agente IA completo...');
    
    try {
      const agentPrompt = `${query}

Para la ciudad: ${citySlug}

INSTRUCCIONES:
- Usa todas las herramientas disponibles seg√∫n necesites
- Combina informaci√≥n de RAG, Vector Search y b√∫squeda web si es necesario
- Proporciona una respuesta completa y bien estructurada
- Responde en espa√±ol de forma √∫til y organizada`;

      const agentResponse = await this.callAgentEngine(agentPrompt);
      
      return {
        response: agentResponse,
        modelUsed: 'vertex-ai-agent-full',
        searchPerformed: true
      };
    } catch (error) {
      console.error('‚ùå Error en Agente completo:', error);
      throw error;
    }
  }

  /**
   * Llamar al Vertex AI Agent Engine
   */
  private static async callAgentEngine(prompt: string): Promise<string> {
    // Importar la funci√≥n de llamada al agente
    const { callAgentEngineHTTP } = await import('./vertexAISimpleProxy');
    return await callAgentEngineHTTP(prompt);
  }
}

/**
 * üåê FUNCI√ìN CLOUD FUNCTION PRINCIPAL
 * Endpoint HTTP para el sistema h√≠brido inteligente
 */
export const hybridIntelligentProxy = functions.https.onRequest(async (req, res) => {
  // Configurar CORS
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.status(200).send('');
    return;
  }

  try {
    const { query, citySlug, userId, isAdmin } = req.body;

    if (!query || !citySlug) {
      return res.status(400).json({
        success: false,
        error: 'Query y citySlug son requeridos',
        response: '',
        systemUsed: 'Error Handler',
        modelUsed: 'error',
        searchPerformed: false,
        processingTime: 0,
        timestamp: new Date().toISOString()
      });
    }

    console.log(`üöÄ H√çBRIDO INTELIGENTE: "${query}" para ${citySlug}`);

    // Procesar con el sistema h√≠brido
    const result = await HybridIntelligentRouter.processQuery(
      query,
      citySlug,
      userId || 'anonymous',
      isAdmin || false
    );

    console.log(`‚úÖ Procesado con ${result.systemUsed} en ${result.processingTime.toFixed(2)}s`);
    
    res.json(result);

  } catch (error) {
    console.error('‚ùå Error en hybridIntelligentProxy:', error);
    
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor',
      response: 'Lo siento, hubo un problema procesando tu consulta. Por favor, int√©ntalo de nuevo.',
      systemUsed: 'Error Handler',
      modelUsed: 'error',
      searchPerformed: false,
      processingTime: 0,
      timestamp: new Date().toISOString()
    });
  }
});
