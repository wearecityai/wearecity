import { GoogleGenAI } from '@google/genai';
import { searchPlaces, getPlacePhotoUrl, PlaceResult } from './placesService';

const PROJECT_ID = process.env.GOOGLE_CLOUD_PROJECT || 'wearecity-2ab89';

console.log('üîë Google AI Config:', { PROJECT_ID });

// Initialize Google AI
const ai = new GoogleGenAI({});

// Query complexity classifier
export const classifyQueryComplexity = (query: string): 'simple' | 'complex' | 'institutional' => {
  // Detectar consultas institucionales primero
  const institutionalIndicators = [
    'tramite', 'tramites', 'procedimiento', 'procedimientos', 'gestion', 'gestiones',
    'ayuntamiento', 'municipio', 'alcaldia', 'gobierno local', 'administracion municipal',
    'sede electronica', 'portal ciudadano', 'atencion ciudadana', 'oficina virtual',
    'certificado', 'certificados', 'documento', 'documentos', 'formulario', 'formularios',
    'empadronamiento', 'empadronar', 'padron', 'censo', 'domicilio', 'residencia',
    'licencia', 'licencias', 'permiso', 'permisos', 'autorizacion', 'autorizaciones',
    'tasa', 'tasas', 'impuesto', 'impuestos', 'tributo', 'tributos', 'pago', 'pagos',
    'cita previa', 'cita', 'citas', 'reserva', 'reservas', 'turno', 'turnos',
    'como solicitar', 'como obtener', 'como presentar', 'como hacer', 'como tramitar',
    'donde solicitar', 'donde presentar', 'donde ir', 'donde acudir',
    'que necesito', 'que documentos', 'que requisitos', 'que papeles',
    'documentacion', 'requisitos', 'pasos', 'proceso', 'tramitacion'
  ];

  const queryNormalized = query.toLowerCase().normalize('NFD').replace(/\p{Diacritic}/gu, '');
  
  // Verificar si es consulta institucional
  const hasInstitutionalIntent = institutionalIndicators.some(indicator => {
    const regex = new RegExp(`\\b${indicator.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'i');
    return regex.test(queryNormalized);
  });

  if (hasInstitutionalIntent) {
    console.log('üèõÔ∏è Institutional query detected - will use Gemini 2.5 Pro with grounding');
    return 'institutional';
  }

  const complexIndicators = [
    'buscar', 'busca', 'encuentra', 'localizar', 'ubicar', 'donde est√°', 'd√≥nde est√°',
    'informaci√≥n actual', 'noticias', 'eventos', 'horarios', 'agenda', 'tiempo real',
    'analizar', 'comparar', 'evaluar', 'explicar en detalle', 'profundizar',
    'm√∫ltiples', 'varios', 'opciones', 'alternativas',
    'paso a paso', 'proceso', 'procedimiento', 'c√≥mo hacer', 'tutorial',
    'imagen', 'foto', 'mapa', 'ubicaci√≥n', 'documento', 'pdf',
    'restaurante', 'hotel', 'tienda', 'museo', 'parque', 'lugar', 'sitio'
  ];

  const simpleIndicators = [
    'hola', 'gracias', 's√≠', 'no', 'ok', 'vale',
    'qu√© tal', 'c√≥mo est√°s', 'buenos d√≠as', 'buenas tardes',
    'definir', 'qu√© es', 'significa'
  ];

  const queryLower = query.toLowerCase();
  
  console.log('üîç Classification debug:', {
    originalQuery: query,
    queryLower,
    queryLength: query.length,
    wordCount: query.split(' ').length
  });
  
  // Check for simple indicators (using word boundary matching)
  const foundSimpleIndicators = simpleIndicators.filter(indicator => {
    const regex = new RegExp(`\\b${indicator.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'i');
    return regex.test(queryLower);
  });
  if (foundSimpleIndicators.length > 0) {
    console.log('‚úÖ Found simple indicators:', foundSimpleIndicators);
    return 'simple';
  }

  // Check for complex indicators (using word boundary matching)
  const foundComplexIndicators = complexIndicators.filter(indicator => {
    const regex = new RegExp(`\\b${indicator.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'i');
    return regex.test(queryLower);
  });
  if (foundComplexIndicators.length > 0) {
    console.log('‚úÖ Found complex indicators:', foundComplexIndicators);
    return 'complex';
  }

  if (query.length > 100 || query.split(' ').length > 20) {
    console.log('‚úÖ Query length/complexity triggers complex classification');
    return 'complex';
  }

  console.log('‚úÖ Defaulting to simple classification');
  return 'simple';
};

// Gemini 2.5 Pro for institutional queries with Google Search grounding
export const processInstitutionalQuery = async (
  query: string, 
  cityContext?: string,
  conversationHistory?: any[]
): Promise<{ text: string; events?: any[]; places?: PlaceResult[] }> => {
  try {
    console.log('üèõÔ∏è Processing institutional query with Gemini 2.5 Pro and grounding');
    
    // Use Gemini 2.5 Pro with Google Search grounding for institutional queries
    const groundingTool = {
      googleSearch: {},
    };

    const config = {
      tools: [groundingTool],
    };

    const model = ai.models.generateContent;

    // Get current date and time for context
    const now = new Date();
    const currentDateTime = now.toLocaleString('es-ES', {
      timeZone: 'Europe/Madrid',
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    let systemPrompt = `Eres WeAreCity, el asistente inteligente de ${cityContext || 'la ciudad'}. 
Tienes acceso a Google Search en tiempo real para proporcionar informaci√≥n actualizada y precisa.

üéØ INFORMACI√ìN ACTUAL:
- Fecha y hora actual: ${currentDateTime} (Espa√±a)
- Usa SIEMPRE esta fecha y hora como referencia para informaci√≥n temporal
- Tienes acceso a Google Search para informaci√≥n en tiempo real

üîç INSTRUCCIONES DE B√öSQUEDA:
- Para consultas sobre eventos, noticias, horarios o informaci√≥n actual, utiliza Google Search autom√°ticamente
- Busca informaci√≥n espec√≠fica en webs oficiales cuando sea posible
- SIEMPRE cita las fuentes de informaci√≥n cuando uses datos de b√∫squedas
- Para eventos en ${cityContext || 'la ciudad'}, busca en webs oficiales del ayuntamiento, turismo local, etc.

‚ö†Ô∏è RESTRICCI√ìN GEOGR√ÅFICA CR√çTICA:
- SOLO incluye eventos que tengan lugar en ${cityContext || 'la ciudad'}, Espa√±a
- SOLO incluye lugares (restaurantes, hoteles, museos, etc.) ubicados en ${cityContext || 'la ciudad'}, Espa√±a
- NO incluyas eventos o lugares de otras ciudades, aunque est√©n cerca
- Verifica que la ubicaci√≥n sea espec√≠ficamente ${cityContext || 'la ciudad'}, Espa√±a
- Si encuentras eventos/lugares de otras ciudades, NO los incluyas en el JSON

üìù FORMATO DE RESPUESTA:
- Responde en espa√±ol de manera clara y profesional
- Para eventos y lugares: haz una BREVE introducci√≥n (2-3 p√°rrafos m√°ximo) y luego muestra las cards
- NO repitas en el texto la informaci√≥n que ya aparece en las cards
- La introducci√≥n debe ser general y contextual, las cards contienen los detalles espec√≠ficos
- Contextualiza toda la informaci√≥n para ${cityContext || 'la ciudad'}, Espa√±a

üé™ FORMATO ESPECIAL PARA EVENTOS:
Cuando encuentres eventos, form√°talos en JSON al final de tu respuesta usando esta estructura:
\`\`\`json
{
  "events": [
    {
      "title": "Nombre del evento",
      "date": "YYYY-MM-DD",
      "endDate": "YYYY-MM-DD" (opcional, para eventos de varios d√≠as),
      "time": "HH:MM - HH:MM" (opcional),
      "location": "Ubicaci√≥n del evento" (opcional),
      "sourceUrl": "URL de la fuente oficial" (opcional),
      "eventDetailUrl": "URL espec√≠fica del evento" (opcional)
    }
  ]
}
\`\`\`

‚ö†Ô∏è IMPORTANTE PARA EVENTOS:
- SOLO incluye eventos que se celebren en ${cityContext || 'la ciudad'}, Espa√±a
- Verifica que la ubicaci√≥n del evento sea espec√≠ficamente ${cityContext || 'la ciudad'}, Espa√±a
- NO incluyas eventos de ciudades cercanas o de la provincia si no son en ${cityContext || 'la ciudad'}

üó∫Ô∏è FORMATO ESPECIAL PARA LUGARES:
Cuando la consulta sea sobre encontrar lugares (restaurantes, hoteles, tiendas, museos, etc.), tambi√©n incluye un bloque JSON para lugares:
\`\`\`json
{
  "places": [
    {
      "name": "Nombre del lugar",
      "address": "Direcci√≥n completa",
      "rating": 4.5 (opcional),
      "type": "restaurante/hotel/museo/etc",
      "description": "Breve descripci√≥n del lugar"
    }
  ]
}
\`\`\`

‚ö†Ô∏è IMPORTANTE PARA LUGARES:
- SOLO incluye lugares ubicados en ${cityContext || 'la ciudad'}, Espa√±a
- Verifica que la direcci√≥n sea espec√≠ficamente en ${cityContext || 'la ciudad'}, Espa√±a
- NO incluyas lugares de ciudades cercanas o de la provincia si no son en ${cityContext || 'la ciudad'}

üìã INSTRUCCIONES PARA INTRODUCCIONES:
- Para eventos: "Te presento los eventos m√°s destacados de [ciudad] para [per√≠odo]..."
- Para lugares: "Aqu√≠ tienes los mejores [tipo de lugar] en [ciudad]..."
- M√°ximo 2-3 p√°rrafos de introducci√≥n
- NO menciones fechas, horarios, ubicaciones espec√≠ficas en el texto (eso va en las cards)
- NO incluyas tablas, listas detalladas o informaci√≥n espec√≠fica en el texto
- Enf√≥cate en el contexto general y la experiencia
- Despu√©s de la introducci√≥n, incluye SOLO el JSON con las cards

üîó EXTRACCI√ìN DE ENLACES DE DETALLES:
- SIEMPRE busca en las webs oficiales los enlaces de "Ver m√°s", "Detalles", "M√°s info", "Leer m√°s", "Saber m√°s", "M√°s informaci√≥n", etc.
- Estos enlaces suelen aparecer como botones o texto clickeable en las cards de eventos
- Extrae la URL completa del enlace y ponla en "eventDetailUrl"
- Los enlaces pueden estar en texto como "Ver detalles", "M√°s informaci√≥n", "Saber m√°s", "Leer m√°s", "M√°s info", "Detalles", etc.

üîç B√öSQUEDA ESPEC√çFICA DE ENLACES:
- Busca en cada evento individual en las webs oficiales
- Los enlaces de detalles suelen estar en botones como "Ver m√°s", "Leer m√°s", "Detalles", "M√°s informaci√≥n"
- Tambi√©n busca enlaces que contengan palabras como "evento", "actividad", "programa", "agenda"
- Si encuentras una p√°gina espec√≠fica del evento, √∫sala como "eventDetailUrl"
- Si NO encuentras un enlace espec√≠fico de detalles, usa la URL de la p√°gina donde se muestran las cards de eventos como "eventDetailUrl"
- NUNCA dejes "eventDetailUrl" vac√≠o - siempre proporciona un enlace √∫til para el usuario

üìù EXTRACCI√ìN DE DESCRIPCIONES:
- SIEMPRE intenta extraer una descripci√≥n breve del evento del contenido web
- Busca p√°rrafos descriptivos, res√∫menes, o informaci√≥n adicional sobre el evento
- La descripci√≥n debe ser atractiva y breve (m√°ximo 150 caracteres, 2-3 l√≠neas)
- Incluye informaci√≥n relevante como: tipo de evento, p√∫blico objetivo, caracter√≠sticas especiales, etc.
- Si no encuentras descripci√≥n espec√≠fica, crea una breve basada en el t√≠tulo y contexto del evento
- Incluye "description" en el JSON de cada evento

‚ö†Ô∏è REGLA IMPORTANTE:
- SIEMPRE incluye "eventDetailUrl" en cada evento
- SIEMPRE incluye "description" en cada evento
- Si no encuentras un enlace espec√≠fico de detalles, usa "sourceUrl" como "eventDetailUrl"
- Si no tienes "sourceUrl", usa la URL de la p√°gina general de agenda como "eventDetailUrl"
- NUNCA dejes "eventDetailUrl" como null o vac√≠o

üö®üö®üö®üö®üö®üö®üö®üö® INSTRUCCIONES CR√çTICAS PARA TR√ÅMITES Y PROCEDIMIENTOS:

Cuando detectes consultas sobre tr√°mites, procedimientos administrativos, documentaci√≥n, requisitos, licencias, certificados, empadronamiento, citas previas, sedes electr√≥nicas, formularios, tasas, horarios de oficinas, etc., DEBES:

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è PROHIBIDO ABSOLUTO - NUNCA DIGAS:
- ‚ùå "te recomiendo consultar"
- ‚ùå "te recomiendo que consultes" 
- ‚ùå "consulta la p√°gina web"
- ‚ùå "consulta la web oficial"
- ‚ùå "consulta directamente"
- ‚ùå "es importante que te informes"
- ‚ùå "los tr√°mites pueden variar"
- ‚ùå "visita la Oficina de Atenci√≥n Ciudadana"
- ‚ùå "all√≠ te informar√°n"
- ‚ùå Cualquier respuesta gen√©rica o vaga

‚úÖ‚úÖ‚úÖ‚úÖ OBLIGATORIO - SIEMPRE DEBES:
- ‚úÖ BUSCAR autom√°ticamente en la web oficial del ayuntamiento usando Google Search grounding
- ‚úÖ EXTRAER informaci√≥n espec√≠fica y actualizada de la web oficial
- ‚úÖ EXPLICAR paso a paso usando datos verificados de la web
- ‚úÖ INCLUIR enlaces directos a formularios, portales de citas y p√°ginas espec√≠ficas
- ‚úÖ MENCIONAR horarios, ubicaciones y costes reales extra√≠dos de la web
- ‚úÖ USAR el icono üìÑ delante de cada documento en la lista de documentaci√≥n
- ‚úÖ PROPORCIONAR informaci√≥n completa y espec√≠fica, no gen√©rica
- ‚úÖ SIEMPRE CITAR las fuentes de donde extraes cada informaci√≥n
- ‚úÖ SER MUY DETALLADO en cada paso del proceso
- ‚úÖ ANALIZAR PROFUNDAMENTE todos los resultados de b√∫squeda
- ‚úÖ EXTRAER informaci√≥n espec√≠fica de cada URL encontrada
- ‚úÖ COMBINAR informaci√≥n de m√∫ltiples fuentes para dar respuestas completas
- ‚úÖ VERIFICAR que cada enlace sea funcional y espec√≠fico

üìã FORMATO OBLIGATORIO PARA TR√ÅMITES:

**T√≠tulo del Tr√°mite** *(extra√≠do de la web oficial)*

üìã **Documentaci√≥n requerida:** 
üìÑ [Lista exacta extra√≠da de la web con enlaces directos a cada documento y fuentes]

üìù **Pasos a seguir (DETALLADOS):**
  1. [Paso espec√≠fico extra√≠do de la web con enlace a la p√°gina correspondiente y fuente]
  2. [Paso espec√≠fico extra√≠do de la web con enlace a la p√°gina correspondiente y fuente]
  3. [Paso espec√≠fico extra√≠do de la web con enlace a la p√°gina correspondiente y fuente]
  4. [Continuar con todos los pasos necesarios, cada uno con su enlace y fuente]

üïí **Horarios y ubicaci√≥n:** 
[Informaci√≥n real extra√≠da de la web oficial con enlaces a horarios y fuentes]

‚è∞ **Plazos:** 
[Tiempo espec√≠fico extra√≠do de la web con enlace a la informaci√≥n de plazos y fuente]

üí∞ **Costes:** 
[Si aplica, informaci√≥n real extra√≠da de la web con enlace a tasas y fuente]

üîó **Enlaces oficiales:**
  - üìÑ **Formularios:** [Enlaces directos a documentos descargables - NUNCA gen√©ricos] *(Fuente: [URL])*
  - üñ•Ô∏è **Portal de citas:** [URL espec√≠fica para pedir cita online - NUNCA gen√©rica] *(Fuente: [URL])*
  - üìã **Sede electr√≥nica:** [Enlace a tr√°mite online si existe - NUNCA gen√©rico] *(Fuente: [URL])*
  - üìû **Contacto:** [Tel√©fono y email oficial extra√≠dos de la web] *(Fuente: [URL])*
  - üåê **Web oficial:** [URL principal del ayuntamiento] *(Fuente: [URL])*
  - üìç **Ubicaci√≥n f√≠sica:** [Direcci√≥n exacta con enlace a Google Maps si est√° disponible] *(Fuente: [URL])*

üìù **Fuentes consultadas:**
- [URL 1] - [Descripci√≥n de la informaci√≥n extra√≠da]
- [URL 2] - [Descripci√≥n de la informaci√≥n extra√≠da]
- [URL 3] - [Descripci√≥n de la informaci√≥n extra√≠da]

üö®üö®üö®üö®üö®üö®üö®üö® SI NO ENCUENTRAS INFORMACI√ìN ESPEC√çFICA EN LA WEB OFICIAL:
Di claramente: "No puedo acceder a la informaci√≥n actualizada del ayuntamiento en este momento. Te recomiendo consultar directamente en su web oficial [URL del ayuntamiento] o contactar por tel√©fono [n√∫mero de tel√©fono si est√° disponible]."

üö®üö®üö®üö®üö®üö®üö®üö® ESTAS INSTRUCCIONES SON ABSOLUTAMENTE OBLIGATORIAS PARA TR√ÅMITES - NO LAS IGNORES

IMPORTANTE: Solo incluye el JSON si hay eventos espec√≠ficos. Si no hay eventos, no incluyas el bloque JSON.`;

    // Build conversation context
    let conversationContext = '';
    if (conversationHistory && conversationHistory.length > 0) {
      conversationContext = '\n\nCONTEXTO:\n';
      conversationHistory.slice(-6).forEach((msg: any) => {
        conversationContext += `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}\n`;
      });
    }

    const fullPrompt = `${systemPrompt}${conversationContext}\n\nConsulta: ${query}`;

    const result = await model({
      model: "gemini-2.5-flash-lite",
      contents: fullPrompt,
      config,
    });

    // Log if grounding was used
    if (result.candidates?.[0]?.groundingMetadata) {
      console.log('üîç Google Search grounding activated:', result.candidates[0].groundingMetadata);
    }

    const responseText = result.text || 'No se pudo generar una respuesta adecuada.';
    
    // Extract events and places from JSON if present
    const events = extractEventsFromResponse(responseText);
    const places = extractPlacesFromResponse(responseText);
    
    // If no places found in AI response, search Google Places
    let additionalPlaces: PlaceResult[] = [];
    if (places.length === 0) {
      const placeKeywords = ['restaurante', 'restaurantes', 'hotel', 'hoteles', 'tienda', 'tiendas', 'museo', 'museos', 'parque', 'parques', 'lugar', 'lugares', 'sitio', 'sitios', 'buscar', 'encuentra', 'donde', 'd√≥nde', 'localiza', 'ubica'];
      const hasPlaceQuery = placeKeywords.some(keyword => query.toLowerCase().includes(keyword));
      
      console.log('üîç Place detection debug:', {
        query: query.toLowerCase(),
        placeKeywords,
        matchedKeywords: placeKeywords.filter(keyword => query.toLowerCase().includes(keyword)),
        hasPlaceQuery,
        cityContext
      });
      
      if (hasPlaceQuery && cityContext) {
        console.log('üó∫Ô∏è Detected place query, searching Google Places...');
        additionalPlaces = await searchPlaces(query, cityContext);
        
        // Add photo URLs to places
        additionalPlaces = additionalPlaces.map(place => ({
          ...place,
          photoUrl: place.photos?.[0] ? getPlacePhotoUrl(place.photos[0].photo_reference) : undefined
        }));
      }
    }
    
    return {
      text: responseText,
      events: events,
      places: [...places, ...additionalPlaces]
    };

  } catch (error) {
    console.error('Error in processComplexQuery:', error);
    throw new Error(`Error procesando consulta compleja: ${error}`);
  }
};

// Use Gemini 1.5 Pro for all queries (simple queries use lighter config)
export const processSimpleQuery = async (
  query: string,
  cityContext?: string,
  conversationHistory?: any[]
): Promise<{ text: string; events?: any[]; places?: PlaceResult[] }> => {
  try {
    const model = ai.models.generateContent;

    // Get current date and time for context
    const now = new Date();
    const currentDateTime = now.toLocaleString('es-ES', {
      timeZone: 'Europe/Madrid',
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const systemPrompt = `Eres el asistente de ${cityContext || 'la ciudad'}. 

INFORMACI√ìN ACTUAL:
- Fecha y hora actual: ${currentDateTime} (Espa√±a)
- Usa esta fecha y hora como referencia

Responde de forma concisa y directa en espa√±ol.
Mant√©n un tono amigable y profesional.`;

    // Limited conversation context for simple queries
    let conversationContext = '';
    if (conversationHistory && conversationHistory.length > 0) {
      conversationContext = '\n\n√öltimos mensajes:\n';
      conversationHistory.slice(-2).forEach((msg: any) => {
        conversationContext += `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}\n`;
      });
    }

    const fullPrompt = `${systemPrompt}${conversationContext}\n\nConsulta: ${query}`;

    const result = await model({
      model: "gemini-2.5-flash-lite",
      contents: fullPrompt,
    });

    const responseText = result.text || 'No se pudo generar una respuesta.';
    
    // Extract events from JSON if present
    const events = extractEventsFromResponse(responseText);
    
    return {
      text: responseText,
      events: events,
      places: []
    };

  } catch (error) {
    console.error('Error in processSimpleQuery:', error);
    throw new Error(`Error procesando consulta simple: ${error}`);
  }
};

// Main processing function
export const processUserQuery = async (
  query: string,
  cityContext?: string,
  conversationHistory?: any[]
): Promise<{
  response: string;
  events?: any[];
  places?: PlaceResult[];
  modelUsed: 'gemini-1.5-pro' | 'gemini-2.5-flash-lite' | 'gemini-2.5-pro';
  complexity: 'simple' | 'complex' | 'institutional';
  searchPerformed: boolean;
}> => {
  const complexity = classifyQueryComplexity(query);
  
  console.log(`üéØ Query classified as: ${complexity}`);
  
  let modelMessage = '';
  if (complexity === 'institutional') {
    modelMessage = 'Gemini 2.5 Pro with Google Search grounding for institutional queries';
  } else if (complexity === 'complex') {
    modelMessage = 'Gemini 2.5 Flash-Lite with Google Search';
  } else {
    modelMessage = 'Gemini 2.5 Flash-Lite';
  }
  console.log(`ü§ñ Using model: ${modelMessage}`);

  try {
    let result: { text: string; events?: any[]; places?: PlaceResult[] };
    let searchPerformed = false;
    let modelUsed: 'gemini-1.5-pro' | 'gemini-2.5-flash-lite' | 'gemini-2.5-pro';

    if (complexity === 'institutional') {
      result = await processInstitutionalQuery(query, cityContext, conversationHistory);
      searchPerformed = true;
      modelUsed = 'gemini-2.5-pro';
    } else if (complexity === 'complex') {
      result = await processComplexQuery(query, cityContext, conversationHistory);
      searchPerformed = true; // Grounding nativo activado
      modelUsed = 'gemini-2.5-flash-lite';
    } else {
      result = await processSimpleQuery(query, cityContext, conversationHistory);
      modelUsed = 'gemini-2.5-flash-lite';
    }

    return {
      response: result.text,
      events: result.events,
      places: result.places,
      modelUsed,
      complexity,
      searchPerformed
    };

  } catch (error) {
    console.error('Error in processUserQuery:', error);
    
    // Fallback response
    return {
      response: 'Lo siento, hubo un problema procesando tu consulta. Por favor, int√©ntalo de nuevo.',
      events: [],
      places: [],
      modelUsed: 'gemini-2.5-flash-lite',
      complexity,
      searchPerformed: false
    };
  }
};

// Multimodal processing for images and documents
export const processMultimodalQuery = async (
  query: string,
  mediaUrl: string,
  mediaType: 'image' | 'document',
  cityContext?: string
): Promise<{ text: string; events?: any[]; places?: PlaceResult[] }> => {
  try {
    const model = ai.models.generateContent;

    // Get current date and time for context
    const now = new Date();
    const currentDateTime = now.toLocaleString('es-ES', {
      timeZone: 'Europe/Madrid',
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const systemPrompt = `Eres el asistente inteligente de ${cityContext || 'la ciudad'}.

INFORMACI√ìN ACTUAL:
- Fecha y hora actual: ${currentDateTime} (Espa√±a)
- Usa esta fecha y hora como referencia temporal

Analiza ${mediaType === 'image' ? 'la imagen' : 'el documento'} proporcionado y responde la consulta del usuario.
Responde en espa√±ol de manera clara y √∫til.`;

    if (mediaType === 'image') {
      // For images, fetch and process
      const imageData = await fetchMediaAsBase64(mediaUrl);
      
      const result = await model({
        model: "gemini-2.5-pro",
        contents: [
          { text: `${systemPrompt}\n\nConsulta: ${query}` },
          {
            inlineData: {
              mimeType: 'image/jpeg',
              data: imageData
            }
          }
        ]
      });

      const responseText = result.text || 'No se pudo analizar la imagen proporcionada.';
      const events = extractEventsFromResponse(responseText);
      
      return {
        text: responseText,
        events: events,
        places: []
      };
    } else {
      // For documents, convert to text first
      const documentText = await extractDocumentText(mediaUrl);
      const fullPrompt = `${systemPrompt}\n\nContenido del documento:\n${documentText}\n\nConsulta: ${query}`;

      const result = await model({
        model: "gemini-2.5-pro",
        contents: fullPrompt
      });

      const responseText = result.text || 'No se pudo analizar el documento proporcionado.';
      const events = extractEventsFromResponse(responseText);
      
      return {
        text: responseText,
        events: events,
        places: []
      };
    }

  } catch (error) {
    console.error('Error in processMultimodalQuery:', error);
    throw new Error(`Error procesando consulta multimodal: ${error}`);
  }
};

// Helper function to fetch media as base64
const fetchMediaAsBase64 = async (url: string): Promise<string> => {
  try {
    const response = await fetch(url);
    const buffer = await response.arrayBuffer();
    return Buffer.from(buffer).toString('base64');
  } catch (error) {
    console.error('Error fetching media:', error);
    throw new Error('No se pudo obtener el archivo multimedia');
  }
};

// Helper function to extract document text
const extractDocumentText = async (url: string): Promise<string> => {
  try {
    const response = await fetch(url);
    const text = await response.text();
    return text.substring(0, 10000);
  } catch (error) {
    console.error('Error extracting document text:', error);
    return 'No se pudo extraer el texto del documento.';
  }
};

// Helper function to extract events from AI response
const extractEventsFromResponse = (responseText: string): any[] => {
  try {
    // Look for JSON block in the response
    const jsonMatch = responseText.match(/```json\s*(\{[\s\S]*?\})\s*```/);
    if (!jsonMatch) {
      return [];
    }

    const jsonString = jsonMatch[1];
    const parsed = JSON.parse(jsonString);
    
    if (parsed.events && Array.isArray(parsed.events)) {
      console.log('üé™ Extracted events:', parsed.events);
      return parsed.events;
    }
    
    return [];
  } catch (error) {
    console.error('Error extracting events from response:', error);
    return [];
  }
};

// Helper function to extract places from AI response
const extractPlacesFromResponse = (responseText: string): any[] => {
  try {
    // Look for JSON block in the response
    const jsonMatch = responseText.match(/```json\s*(\{[\s\S]*?\})\s*```/);
    if (!jsonMatch) {
      return [];
    }

    const jsonString = jsonMatch[1];
    const parsed = JSON.parse(jsonString);
    
    if (parsed.places && Array.isArray(parsed.places)) {
      console.log('üó∫Ô∏è Extracted places:', parsed.places);
      return parsed.places;
    }
    
    return [];
  } catch (error) {
    console.error('Error extracting places from response:', error);
    return [];
  }
};