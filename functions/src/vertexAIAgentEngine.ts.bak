import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import { GoogleAuth } from 'google-auth-library';

// Inicializar Firebase Admin si no est√° inicializado
if (!admin.apps.length) {
  admin.initializeApp();
}

interface AgentEngineRequest {
  query: string;
  citySlug: string;
  conversationHistory?: Array<{
    role: 'user' | 'assistant';
    content: string;
  }>;
  userId: string;
}

interface AgentEngineResponse {
  success: boolean;
  response: string;
  modelUsed: string;
  eventsFromFirestore: boolean;
  searchPerformed: boolean;
  error?: string;
}

/**
 * Funci√≥n Firebase que conecta con Vertex AI Agent Engine
 */
export const processAIWithAgentEngine = functions.https.onRequest(async (req, res) => {
  // Configurar CORS
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.status(200).send('');
    return;
  }

  try {
    const { query, citySlug, conversationHistory = [], userId }: AgentEngineRequest = req.body;

    console.log('ü§ñ Procesando consulta con Vertex AI Agent Engine:', {
      query: query?.substring(0, 100),
      citySlug,
      userId,
      hasHistory: conversationHistory.length > 0
    });

    // Validaci√≥n de par√°metros
    if (!query || !citySlug || !userId) {
      if (!res.headersSent) {
        return res.status(400).json({
          success: false,
          error: 'Faltan par√°metros requeridos: query, citySlug, userId'
        });
      }
      return;
    }

    // Configurar autenticaci√≥n para Vertex AI
    const auth = new GoogleAuth({
      scopes: ['https://www.googleapis.com/auth/cloud-platform']
    });

    const authClient = await auth.getClient();
    const projectId = process.env.GCLOUD_PROJECT || 'wearecity-2ab89';
    const location = 'us-central1';
    const agentEngineId = '3094997688840617984';

    // Construir el contexto de la ciudad
    const cityContext = `
Ciudad: ${citySlug}
Contexto: Asistente especializado en informaci√≥n municipal, tr√°mites, eventos y servicios de la ciudad de ${citySlug}.
Instrucciones: Proporciona informaci√≥n precisa y actualizada sobre la ciudad. Si necesitas informaci√≥n espec√≠fica sobre eventos, utiliza el sistema RAG para buscar en la base de datos.
`;

    // Preparar el prompt con historial de conversaci√≥n
    let fullPrompt = cityContext + '\n\n';
    
    if (conversationHistory.length > 0) {
      fullPrompt += 'Historial de conversaci√≥n:\n';
      conversationHistory.slice(-5).forEach(msg => {
        fullPrompt += `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}\n`;
      });
      fullPrompt += '\n';
    }
    
    fullPrompt += `Consulta actual: ${query}`;

    // Llamar al Agent Engine
    const url = `https://us-central1-aiplatform.googleapis.com/v1beta1/projects/${projectId}/locations/${location}/reasoningEngines/${agentEngineId}:query`;
    
    const requestBody = {
      input: {
        text: fullPrompt
      },
      config: {
        temperature: 0.1,
        maxTokens: 2048
      }
    };

    console.log('üì° Llamando a Vertex AI Agent Engine...');
    
    const response = await authClient.request({
      url,
      method: 'POST',
      data: requestBody
    });

    const agentResponse = response.data;
    console.log('‚úÖ Respuesta recibida del Agent Engine');

    // Procesar la respuesta
    let responseText = '';
    if (agentResponse.output && agentResponse.output.text) {
      responseText = agentResponse.output.text;
    } else if (agentResponse.response) {
      responseText = agentResponse.response;
    } else {
      responseText = 'Lo siento, no pude procesar tu consulta en este momento.';
    }

    // Registrar m√©tricas (opcional)
    try {
      await admin.firestore().collection('ai_metrics').add({
        userId,
        citySlug,
        query: query.substring(0, 100),
        modelUsed: 'vertex-ai-agent-engine',
        responseLength: responseText.length,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        success: true
      });
    } catch (metricsError) {
      console.warn('Error guardando m√©tricas:', metricsError);
    }

    const result: AgentEngineResponse = {
      success: true,
      response: responseText,
      modelUsed: 'vertex-ai-agent-engine',
      eventsFromFirestore: true, // El agente puede usar RAG para eventos
      searchPerformed: true
    };

    console.log('üéØ Respuesta procesada exitosamente');
    if (!res.headersSent) {
      return res.status(200).json(result);
    }

  } catch (error) {
    console.error('‚ùå Error en processAIWithAgentEngine:', error);
    
    // Registrar error en m√©tricas
    try {
      await admin.firestore().collection('ai_metrics').add({
        userId: req.body?.userId || 'unknown',
        citySlug: req.body?.citySlug || 'unknown',
        query: req.body?.query?.substring(0, 100) || 'unknown',
        modelUsed: 'vertex-ai-agent-engine',
        error: error.message,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        success: false
      });
    } catch (metricsError) {
      console.warn('Error guardando m√©tricas de error:', metricsError);
    }

    const errorResponse: AgentEngineResponse = {
      success: false,
      response: 'Lo siento, ha ocurrido un error procesando tu consulta. Por favor, int√©ntalo de nuevo.',
      modelUsed: 'vertex-ai-agent-engine',
      eventsFromFirestore: false,
      searchPerformed: false,
      error: error.message
    };

    if (!res.headersSent) {
      return res.status(500).json(errorResponse);
    }
  }
});

/**
 * Funci√≥n para probar la conexi√≥n con Agent Engine
 */
export const testAgentEngine = functions.https.onCall(async (data, context) => {
  // Verificar autenticaci√≥n
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated');
  }

  try {
    const auth = new GoogleAuth({
      scopes: ['https://www.googleapis.com/auth/cloud-platform']
    });

    const authClient = await auth.getClient();
    const projectId = process.env.GCLOUD_PROJECT || 'wearecity-2ab89';
    const location = 'us-central1';
    const agentEngineId = '3094997688840617984';

    const url = `https://us-central1-aiplatform.googleapis.com/v1beta1/projects/${projectId}/locations/${location}/reasoningEngines/${agentEngineId}:query`;
    
    const response = await authClient.request({
      url,
      method: 'POST',
      data: {
        input: {
          text: 'Hola, ¬øpuedes confirmar que el sistema est√° funcionando correctamente?'
        }
      }
    });

    return {
      success: true,
      message: 'Agent Engine est√° funcionando correctamente',
      agentEngineId,
      response: response.data
    };

  } catch (error) {
    console.error('Error testing Agent Engine:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});
