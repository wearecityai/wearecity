"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hybridIntelligentProxy = exports.HybridIntelligentRouter = exports.IntelligentQueryClassifier = exports.QueryType = void 0;
const functions = __importStar(require("firebase-functions"));
// Tipos de consulta y sus caracter√≠sticas
var QueryType;
(function (QueryType) {
    QueryType["SIMPLE"] = "simple";
    QueryType["EVENTS"] = "events";
    QueryType["PROCEDURES"] = "procedures";
    QueryType["COMPLEX"] = "complex"; // Consultas complejas que requieren razonamiento
})(QueryType = exports.QueryType || (exports.QueryType = {}));
/**
 * üß† CLASIFICADOR INTELIGENTE DE CONSULTAS
 * Analiza la consulta y decide el mejor sistema para responderla
 */
class IntelligentQueryClassifier {
    /**
     * Clasifica una consulta y determina el mejor sistema para procesarla
     */
    static classifyQuery(query, citySlug) {
        const normalizedQuery = query.toLowerCase().trim();
        const queryLength = query.length;
        console.log(`üß† Clasificando consulta: "${query.substring(0, 50)}..." para ${citySlug}`);
        // 1Ô∏è‚É£ CONSULTAS SIMPLES (Gemini directo)
        if (queryLength < 20 || this.matchesPatterns(normalizedQuery, this.SIMPLE_PATTERNS)) {
            return {
                type: QueryType.SIMPLE,
                confidence: 0.95,
                reasoning: 'Consulta simple: saludo, agradecimiento o pregunta b√°sica',
                suggestedSystem: 'gemini-direct',
                estimatedCost: 0.001,
                estimatedLatency: 0.1
            };
        }
        // 2Ô∏è‚É£ CONSULTAS DE EVENTOS (RAG Vectorial)
        if (this.matchesPatterns(normalizedQuery, this.EVENTS_PATTERNS)) {
            return {
                type: QueryType.EVENTS,
                confidence: 0.9,
                reasoning: 'Consulta sobre eventos: buscar en RAG vectorial primero',
                suggestedSystem: 'rag-vectorial',
                estimatedCost: 0.005,
                estimatedLatency: 0.3
            };
        }
        // 3Ô∏è‚É£ CONSULTAS DE TR√ÅMITES (Google Search)
        if (this.matchesPatterns(normalizedQuery, this.PROCEDURES_PATTERNS)) {
            return {
                type: QueryType.PROCEDURES,
                confidence: 0.85,
                reasoning: 'Consulta sobre tr√°mites: usar Google Search Grounding para info oficial',
                suggestedSystem: 'google-search',
                estimatedCost: 0.01,
                estimatedLatency: 0.8
            };
        }
        // 4Ô∏è‚É£ CONSULTAS COMPLEJAS (Agente IA completo)
        if (queryLength > 100 || this.matchesPatterns(normalizedQuery, this.COMPLEX_PATTERNS)) {
            return {
                type: QueryType.COMPLEX,
                confidence: 0.8,
                reasoning: 'Consulta compleja: requiere razonamiento y m√∫ltiples herramientas',
                suggestedSystem: 'agent-full',
                estimatedCost: 0.03,
                estimatedLatency: 2.0
            };
        }
        // 5Ô∏è‚É£ DEFAULT: Usar Google Search para consultas generales
        return {
            type: QueryType.PROCEDURES,
            confidence: 0.6,
            reasoning: 'Consulta general: usar Google Search como opci√≥n segura',
            suggestedSystem: 'google-search',
            estimatedCost: 0.01,
            estimatedLatency: 0.8
        };
    }
    /**
     * Verifica si la consulta coincide con alg√∫n patr√≥n
     */
    static matchesPatterns(query, patterns) {
        return patterns.some(pattern => pattern.test(query));
    }
}
exports.IntelligentQueryClassifier = IntelligentQueryClassifier;
// Patrones para diferentes tipos de consulta
IntelligentQueryClassifier.SIMPLE_PATTERNS = [
    /^(hola|hi|hello|buenas|buenos d√≠as|buenas tardes|buenas noches)$/i,
    /^(gracias|thank you|muchas gracias)$/i,
    /^(adi√≥s|bye|hasta luego|nos vemos)$/i,
    /^(¬ø?c√≥mo est√°s|how are you|qu√© tal)$/i,
    /^(ayuda|help|informaci√≥n)$/i
];
IntelligentQueryClassifier.EVENTS_PATTERNS = [
    /\b(evento|eventos|actividad|actividades|concierto|festival|exposici√≥n)\b/i,
    /\b(agenda|programaci√≥n|calendario|espect√°culo|teatro|m√∫sica)\b/i,
    /\b(qu√© hay|qu√© pasa|qu√© hacer|planes|entretenimiento)\b/i,
    /\b(este fin de semana|esta semana|hoy|ma√±ana|pr√≥ximo)\b.*\b(evento|actividad)\b/i,
    /\b(cultural|deportivo|gastron√≥mico|tur√≠stico)\b.*\b(evento|actividad)\b/i
];
IntelligentQueryClassifier.PROCEDURES_PATTERNS = [
    /\b(tr√°mite|tr√°mites|papeles|documentaci√≥n|solicitar|solicitud)\b/i,
    /\b(licencia|permiso|certificado|empadronamiento|padr√≥n)\b/i,
    /\b(ayuntamiento|consistorio|oficina|sede electr√≥nica)\b/i,
    /\b(cita previa|horario|tel√©fono|direcci√≥n).*\b(ayuntamiento|oficina)\b/i,
    /\b(impuesto|tasa|multa|pago|factura)\b/i,
    /\b(c√≥mo|d√≥nde|cu√°ndo).*\b(solicitar|tramitar|pagar|presentar)\b/i
];
IntelligentQueryClassifier.COMPLEX_PATTERNS = [
    /\b(planifica|organiza|recomienda|sugiere|dise√±a)\b/i,
    /\b(ruta|itinerario|plan|programa).*\b(tur√≠stico|visita|d√≠a)\b/i,
    /\b(mejor|mejores|comparar|diferencia|ventajas)\b/i,
    /\b(combina|relaciona|conecta).*\b(con|y)\b/i,
    /\b(an√°lisis|evaluaci√≥n|opini√≥n|consejo)\b/i
];
/**
 * üöÄ ROUTER H√çBRIDO INTELIGENTE
 * Procesa consultas usando el sistema √≥ptimo para cada caso
 */
class HybridIntelligentRouter {
    /**
     * Procesa una consulta usando el sistema h√≠brido inteligente
     */
    static async processQuery(query, citySlug, userId = 'anonymous', isAdmin = false) {
        const startTime = Date.now();
        try {
            // üß† PASO 1: Clasificar la consulta
            const classification = IntelligentQueryClassifier.classifyQuery(query, citySlug);
            console.log(`üéØ Consulta clasificada como: ${classification.type} (${classification.confidence * 100}%)`);
            console.log(`üí° Sistema sugerido: ${classification.suggestedSystem}`);
            console.log(`‚è±Ô∏è Latencia estimada: ${classification.estimatedLatency}s`);
            console.log(`üí∞ Costo estimado: ‚Ç¨${classification.estimatedCost}`);
            let result;
            let systemUsed;
            let fallbackUsed = false;
            // üîÄ PASO 2: Procesar seg√∫n el sistema sugerido
            switch (classification.suggestedSystem) {
                case 'gemini-direct':
                    result = await this.processWithGeminiDirect(query, citySlug);
                    systemUsed = 'Gemini 2.5 Flash Directo';
                    break;
                case 'rag-vectorial':
                    result = await this.processWithRAGVectorial(query, citySlug);
                    if (!result || !result.response) {
                        console.log('üîÑ RAG no encontr√≥ resultados, fallback a Google Search...');
                        result = await this.processWithGoogleSearch(query, citySlug);
                        systemUsed = 'RAG Vectorial ‚Üí Google Search (Fallback)';
                        fallbackUsed = true;
                    }
                    else {
                        systemUsed = 'RAG Vectorial';
                    }
                    break;
                case 'google-search':
                    result = await this.processWithGoogleSearch(query, citySlug);
                    systemUsed = 'Gemini 2.5 Flash + Google Search';
                    break;
                case 'agent-full':
                    result = await this.processWithFullAgent(query, citySlug, isAdmin);
                    systemUsed = 'Vertex AI Agent Engine Completo';
                    break;
                default:
                    throw new Error(`Sistema no reconocido: ${classification.suggestedSystem}`);
            }
            const processingTime = (Date.now() - startTime) / 1000;
            return {
                success: true,
                response: result.response || 'No se pudo generar una respuesta adecuada.',
                classification,
                systemUsed,
                modelUsed: result.modelUsed || classification.suggestedSystem,
                searchPerformed: result.searchPerformed || false,
                processingTime,
                timestamp: new Date().toISOString(),
                fallbackUsed
            };
        }
        catch (error) {
            console.error('‚ùå Error en HybridIntelligentRouter:', error);
            const processingTime = (Date.now() - startTime) / 1000;
            return {
                success: false,
                response: 'Lo siento, hubo un problema procesando tu consulta. Por favor, int√©ntalo de nuevo.',
                classification: {
                    type: QueryType.SIMPLE,
                    confidence: 0,
                    reasoning: 'Error en procesamiento',
                    suggestedSystem: 'gemini-direct',
                    estimatedCost: 0,
                    estimatedLatency: 0
                },
                systemUsed: 'Error Handler',
                modelUsed: 'error',
                searchPerformed: false,
                processingTime,
                timestamp: new Date().toISOString(),
                error: error.message
            };
        }
    }
    /**
     * üí¨ SISTEMA 1: Gemini 2.5 Flash Directo (Consultas simples)
     */
    static async processWithGeminiDirect(query, citySlug) {
        console.log('üí¨ Procesando con Gemini 2.5 Flash directo...');
        try {
            // Importar el servicio de Gemini
            const { processSimpleQuery } = await Promise.resolve().then(() => __importStar(require('./vertexAIService')));
            const result = await processSimpleQuery(query, citySlug, []);
            return {
                response: result.response,
                modelUsed: 'gemini-2.5-flash-lite',
                searchPerformed: false
            };
        }
        catch (error) {
            console.error('‚ùå Error en Gemini directo:', error);
            throw error;
        }
    }
    /**
     * üß† SISTEMA 2: RAG Vectorial (Eventos)
     */
    static async processWithRAGVectorial(query, citySlug) {
        console.log('üß† Procesando con RAG vectorial...');
        try {
            // Llamar al agente con instrucciones espec√≠ficas para RAG
            const agentPrompt = `Busca informaci√≥n sobre eventos usando b√∫squeda vectorial: ${query}

Para la ciudad: ${citySlug}

INSTRUCCIONES:
1. USA vector_search_in_rag para buscar informaci√≥n sobre eventos
2. Si encuentras eventos relevantes, pres√©ntalos de forma organizada
3. Si no encuentras informaci√≥n, responde que no hay eventos disponibles
4. NO inventes informaci√≥n
5. Responde en espa√±ol de forma √∫til`;
            const agentResponse = await this.callAgentEngine(agentPrompt);
            // Verificar si encontr√≥ informaci√≥n √∫til
            if (!agentResponse ||
                agentResponse.length < 50 ||
                agentResponse.includes('no hay eventos') ||
                agentResponse.includes('No se encontraron')) {
                return null; // Trigger fallback
            }
            return {
                response: agentResponse,
                modelUsed: 'vertex-ai-agent-rag',
                searchPerformed: true
            };
        }
        catch (error) {
            console.error('‚ùå Error en RAG vectorial:', error);
            return null; // Trigger fallback
        }
    }
    /**
     * üîç SISTEMA 3: Google Search Grounding (Tr√°mites)
     */
    static async processWithGoogleSearch(query, citySlug) {
        console.log('üîç Procesando con Google Search Grounding...');
        try {
            // Importar el servicio de Google Search
            const { processInstitutionalQuery } = await Promise.resolve().then(() => __importStar(require('./vertexAIService')));
            const result = await processInstitutionalQuery(query, citySlug, []);
            return {
                response: result.response,
                modelUsed: 'gemini-2.5-flash',
                searchPerformed: true
            };
        }
        catch (error) {
            console.error('‚ùå Error en Google Search:', error);
            throw error;
        }
    }
    /**
     * ü§ñ SISTEMA 4: Agente IA Completo (Consultas complejas)
     */
    static async processWithFullAgent(query, citySlug, isAdmin) {
        console.log('ü§ñ Procesando con Agente IA completo...');
        try {
            const agentPrompt = `${query}

Para la ciudad: ${citySlug}

INSTRUCCIONES:
- Usa todas las herramientas disponibles seg√∫n necesites
- Combina informaci√≥n de RAG, Vector Search y b√∫squeda web si es necesario
- Proporciona una respuesta completa y bien estructurada
- Responde en espa√±ol de forma √∫til y organizada`;
            const agentResponse = await this.callAgentEngine(agentPrompt);
            return {
                response: agentResponse,
                modelUsed: 'vertex-ai-agent-full',
                searchPerformed: true
            };
        }
        catch (error) {
            console.error('‚ùå Error en Agente completo:', error);
            throw error;
        }
    }
    /**
     * Llamar al Vertex AI Agent Engine
     */
    static async callAgentEngine(prompt) {
        // Importar la funci√≥n de llamada al agente
        const { callAgentEngineHTTP } = await Promise.resolve().then(() => __importStar(require('./vertexAISimpleProxy')));
        return await callAgentEngineHTTP(prompt);
    }
}
exports.HybridIntelligentRouter = HybridIntelligentRouter;
/**
 * üåê FUNCI√ìN CLOUD FUNCTION PRINCIPAL
 * Endpoint HTTP para el sistema h√≠brido inteligente
 */
exports.hybridIntelligentProxy = functions.https.onRequest(async (req, res) => {
    // Configurar CORS
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    if (req.method === 'OPTIONS') {
        res.status(200).send('');
        return;
    }
    try {
        const { query, citySlug, userId, isAdmin } = req.body;
        if (!query || !citySlug) {
            return res.status(400).json({
                success: false,
                error: 'Query y citySlug son requeridos',
                response: '',
                systemUsed: 'Error Handler',
                modelUsed: 'error',
                searchPerformed: false,
                processingTime: 0,
                timestamp: new Date().toISOString()
            });
        }
        console.log(`üöÄ H√çBRIDO INTELIGENTE: "${query}" para ${citySlug}`);
        // Procesar con el sistema h√≠brido
        const result = await HybridIntelligentRouter.processQuery(query, citySlug, userId || 'anonymous', isAdmin || false);
        console.log(`‚úÖ Procesado con ${result.systemUsed} en ${result.processingTime.toFixed(2)}s`);
        res.json(result);
    }
    catch (error) {
        console.error('‚ùå Error en hybridIntelligentProxy:', error);
        res.status(500).json({
            success: false,
            error: 'Error interno del servidor',
            response: 'Lo siento, hubo un problema procesando tu consulta. Por favor, int√©ntalo de nuevo.',
            systemUsed: 'Error Handler',
            modelUsed: 'error',
            searchPerformed: false,
            processingTime: 0,
            timestamp: new Date().toISOString()
        });
    }
});
//# sourceMappingURL=hybridIntelligentRouter.js.map